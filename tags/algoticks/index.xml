<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algoticks on &lt;stdin></title><link>https://stdin.top/tags/algoticks/</link><description>Recent content in algoticks on &lt;stdin></description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Mar 2021 01:24:18 +0000</lastBuildDate><atom:link href="https://stdin.top/tags/algoticks/index.xml" rel="self" type="application/rss+xml"/><item><title>Algoticks v2.0 - improving memory efficiency</title><link>https://stdin.top/posts/algoticks_2.0/</link><pubDate>Wed, 17 Mar 2021 01:24:18 +0000</pubDate><guid>https://stdin.top/posts/algoticks_2.0/</guid><description>&lt;p>&lt;a href="https://github.com/jkotra/algoticks">Github&lt;/a>&lt;/p>
&lt;hr>
&lt;p>it&amp;rsquo;s been in my mind for a few months, but I always said &amp;ldquo;&lt;em>it&amp;rsquo;s just a few megabytes pff&lt;/em>. ðŸ˜‘&amp;rdquo; and kept on postponing it. one fine day, I started branch &lt;code>2.0&lt;/code> and finally started to refactor my code, most of it is converting stack allocation to heap allocation.&lt;/p>
&lt;h1 id="what-changed">What changed?&lt;/h1>
&lt;p>to start with, most of the memory is now allocated on the heap rather than the stack. this has some performance gains but not much compared to humongous memory savings compared to the previous version(s). &lt;em>algoticks v2.0&lt;/em> uses less than &lt;strong>110%&lt;/strong> less memory.&lt;/p>
&lt;p>some other significant changes were:&lt;/p>
&lt;ul>
&lt;li>sending callbacks is now much simplified.&lt;/li>
&lt;li>JSON parsing code has been moved to src/parser.c.&lt;/li>
&lt;li>a bug with &lt;code>sync_curr&lt;/code> has been fixed. presence of this bug might have produced false results with derivative + benchmark mode.&lt;/li>
&lt;li>string length restrictions are virtually gone, the length is calculated at runtime, and memory allocated appropriately&lt;/li>
&lt;li>memory-efficient &lt;em>==&lt;/em> embedded friendly (more on that later!)&lt;/li>
&lt;/ul></description></item><item><title>Writing an Algorithm for Algoticks</title><link>https://stdin.top/posts/write-algo-for-algoticks/</link><pubDate>Sat, 11 Jul 2020 01:21:15 +0530</pubDate><guid>https://stdin.top/posts/write-algo-for-algoticks/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This is a short tutorial on how to write an algorithm to use with algoticks. This article also provides a general layout of how algoticks asks and receives signals from user-written algorithms.&lt;/p>
&lt;p>an algorithm, in the context of algoticks, is simply a function. The function must return a &lt;code>signal&lt;/code>&lt;/p>
&lt;p>&lt;code>Signal&lt;/code> is defined as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">Signal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">buy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">neutral&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sell&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="n">algoticks_signal&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>only any one of the above fields shall be set to &lt;code>true&lt;/code> and the remaining two must be set to &lt;code>false&lt;/code>. A &lt;code>signal&lt;/code> response consisting of more than 1 field set as &lt;code>true&lt;/code> will result in either an error or a guaranteed (undefined/undesired) behavior.&lt;/p>
&lt;h1 id="layout">Layout&lt;/h1>
&lt;p>Example layout of an algorithm is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;../../include/dtypes.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#ifdef _WIN32
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kr">__declspec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dllexport&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// This is required for windows compatibility.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">algoticks_signal&lt;/span> &lt;span class="n">analyze&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">algoticks_row&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">series&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n_candles&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="cm">/* Blah Blah Blah */&lt;/span> &lt;span class="c1">// a short desc. of algorithm
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">Signal&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm"> DO SOMETHING HERE!
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// finally return the signal.
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="whats-inside-series">what&amp;rsquo;s inside &lt;code>series&lt;/code>?&lt;/h1>
&lt;p>a series is a collection of &lt;code>n&lt;/code> rows (&lt;code>n&lt;/code> defined by user &lt;code>candles&lt;/code> in &lt;code>config.json&lt;/code>)&lt;/p>
&lt;p>a &lt;code>Row&lt;/code> struct is defined as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">Row&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="cm">/* dataformat to store CSV data */&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">date&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">close&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">volume&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">algoticks_tow_ti&lt;/span> &lt;span class="n">technical_indicators&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">curr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">n_rows&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//this is to be set in case of Row array of non-predetermined size.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="n">algoticks_row&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice &lt;code>technical_indicators&lt;/code> of type &lt;code>algoticks_tow_ti&lt;/code>&lt;/p>
&lt;p>&lt;code>algoticks_tow_ti&lt;/code> is another struct that holds user given technical indicator data.&lt;/p>
&lt;p>&lt;code>algoticks_tow_ti&lt;/code> is defined as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">row_ti&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">is_ti1_p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">ti1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">is_ti2_p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">ti2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">is_ti3_p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">ti3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">is_ti_others_p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">ti_others&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2048&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="n">algoticks_tow_ti&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>algoticks allow up to 3 technical indicators i.e &lt;code>ti1&lt;/code> &lt;code>ti2&lt;/code> &lt;code>ti3&lt;/code> these fields need to explicitly set by the user in CSV data source to be parsed by algoticks.&lt;/p>
&lt;p>if more then 3 technical indicators are required, the user can use &lt;code>ti_others&lt;/code> and split it inside the algorithm as he needs.&lt;/p>
&lt;p>fields with &lt;code>_p&lt;/code> prefix are flags indicating the presence of corresponding values.&lt;/p>
&lt;h1 id="dissecting-a-simple-algorithm">Dissecting a simple algorithm&lt;/h1>
&lt;p>Here, we take a simple algorithm &lt;code>Greens&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://github.com/jkotra/algoticks/blob/master/src/algorithms/Greens.c">&lt;code>Greens.c&lt;/code>&lt;/a> is included with algoticks and can be found at &lt;code>algorithms/Greens.c&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;../../include/dtypes.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#ifdef _WIN32
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kr">__declspec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dllexport&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="cp">#endif
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="n">algoticks_signal&lt;/span> &lt;span class="n">analyze&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">algoticks_row&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">series&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n_candles&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="cm">/* This is a buy only algo indicator */&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">Signal&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Step 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n_candles&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Step 2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">series&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">close&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">series&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">// Step 3
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">buy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">signal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">neutral&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">signal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sell&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">signal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">buy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Step 4
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are only 4 simple steps in writing an algorithm.&lt;/p>
&lt;ol>
&lt;li>Declare a &lt;code>Signal&lt;/code> struct.&lt;/li>
&lt;li>Start a &lt;code>for&lt;/code> loop.&lt;/li>
&lt;li>Write the condition. If the condition fails, set &lt;code>signal.neutral&lt;/code> to &lt;code>true&lt;/code> and &lt;code>signal.buy&lt;/code> and &lt;code>signal.sell&lt;/code> to &lt;code>false&lt;/code>.&lt;/li>
&lt;li>if the condition is met, set &lt;code>signal.buy&lt;/code> to &lt;code>true&lt;/code>&lt;/li>
&lt;li>Return &lt;code>signal&lt;/code>&lt;/li>
&lt;/ol>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>The example above is a very simple algorithm. a bit complex algorithm(s) like &lt;a href="https://github.com/jkotra/algoticks/blob/master/src/algorithms/EveningStar.c">&lt;code>EveningStar&lt;/code>&lt;/a> should be reviewed for a better understanding of translating your ideas into working algorithms.&lt;/p></description></item><item><title>Getting Started With Algoticks</title><link>https://stdin.top/posts/getting-started-with-algoticks/</link><pubDate>Thu, 02 Jul 2020 03:06:47 +0000</pubDate><guid>https://stdin.top/posts/getting-started-with-algoticks/</guid><description>&lt;div class="notices note" >&lt;p>&lt;p>&lt;strong>Updated&lt;/strong>: 10-Mar-2021&lt;/p>
&lt;ul>
&lt;li>&lt;em>Updated things that are changed in algoticks v2.0&lt;/em>&lt;/li>
&lt;/ul>
&lt;/p>&lt;/div>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This is a quick &amp;ldquo;Getting Started&amp;rdquo; Guide to algoticks trading simulator program. Algorticks is an algorithmic trading simulator written in C with Speed and modularity as design objectives. It&amp;rsquo;s easy to write your own algorithms, all you need to know is how to write a for loop in C. (&lt;a href="https://www.tutorialspoint.com/cprogramming/c_for_loop.htm">learn here&lt;/a>)&lt;/p>
&lt;p>Algoticks is built to handle many types of OHLC data, most of the data found online can be directly fed into the program without any additional filtering.&lt;/p>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>&lt;a href="https://github.com/jkotra/algoticks/releases/">Get latest algoticks release from github repository!&lt;/a>&lt;/p>
&lt;p>to build from source, please refer to &lt;a href="https://github.com/jkotra/algoticks/blob/master/README.md">README.md&lt;/a>&lt;/p>
&lt;h2 id="preprocessing">Preprocessing&lt;/h2>
&lt;p>Additional preprocessing is necessary to remove any oddities in your data like Missing data, ununiform formatting, etc.&lt;/p>
&lt;p>Algoticks accepts upto 3 technical indicator columns namely as &lt;code>ti1&lt;/code>, &lt;code>ti2&lt;/code>, &lt;code>ti3&lt;/code>. these values must be of type &lt;code>int&lt;/code> or &lt;code>float&lt;/code>. any additional technical indicators can be included using &lt;code>ti_others&lt;/code> column name. these values are exposed as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">Row&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">technical_indicators&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ti1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Row&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">technical_indicators&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ti2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Row&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">technical_indicators&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ti3&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Row&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">technical_indicators&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ti_others&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2084&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="simulation">Simulation&lt;/h2>
&lt;p>Example config file(s) can be found in the &lt;code>assets&lt;/code> folder of the project. these are copied into &lt;code>bin&lt;/code> folder on the invocation of &lt;code>make&lt;/code>&lt;/p>
&lt;p>example &lt;code>config.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;algo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;algorithms/3Reds.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;datasource&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;example.csv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;symbol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;SUNPHARMA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;candles&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interval&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;quantity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;target&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;stoploss&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;is_training_sl&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;trailing_sl_val&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;sliding&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;intraday&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;skip_header&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>algo&lt;/code> - This is the name of the algorithm.&lt;/p>
&lt;p>&lt;code>datasource&lt;/code> - This is the datasource which is expected to contain OHLC data.&lt;/p>
&lt;p>&lt;code>symbol&lt;/code> - Symbol corresponding to datasource.&lt;/p>
&lt;p>&lt;code>candles&lt;/code> - &lt;code>N&lt;/code> candles to be sent to &lt;code>algo&lt;/code>&lt;/p>
&lt;p>&lt;code>interval&lt;/code> - &lt;code>n&lt;/code> rows to skip. Assuming your data is &lt;code>1min&lt;/code> interval, skipping 5 rows effectively makes it &lt;code>5min&lt;/code> interval data.&lt;/p>
&lt;p>&lt;code>quantity&lt;/code> - Quantity&lt;/p>
&lt;p>&lt;code>target&lt;/code> - Desired target (Absolute Value)&lt;/p>
&lt;p>&lt;code>Stoploss&lt;/code> - Desired Stoploss (Absolute Value)&lt;/p>
&lt;p>&lt;code>is_training_sl&lt;/code> - Enable/Disable Trailing SL.&lt;/p>
&lt;p>&lt;code>trailing_sl_val&lt;/code> - Value to adjust on Target hit if trailing SL enabled.&lt;/p>
&lt;p>&lt;code>sliding&lt;/code> - If enabled, the data on I(Iteration)+1 will be in the form of N(Candles)+1. Otherwise only new rows are processed on every iteration.&lt;/p>
&lt;p>&lt;code>intraday&lt;/code> - Position is closed if time is over &lt;code>intraday&lt;/code>. (&lt;code>intraday_hour&lt;/code> and &lt;code>intraday_min&lt;/code> is to be set in &lt;code>settings.json&lt;/code>)&lt;/p>
&lt;p>&lt;code>skip_header&lt;/code> - Skips headers (Must be set to &lt;code>true&lt;/code> for header order detection)&lt;/p>
&lt;div class="notices note" >&lt;p>&lt;p>if &lt;code>sliding: true&lt;/code>&lt;/p>
&lt;p>$$\ [r1, r2, r3]r4,r5,r6 $$
$$\ r1, [r2, r3,r4],r5,r6 $$&lt;/p>
&lt;p>if &lt;code>sliding: false&lt;/code>&lt;/p>
&lt;p>$$\ [r1, r2, r3]r4,r5,r6 $$
$$\ r1, r2, r3,[r4,r5,r6] $$&lt;/p>
&lt;/p>&lt;/div>
&lt;hr>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>Data: &lt;a href="https://drive.google.com/file/d/19sH22KV4X_reuf7wg2AWLXqVLSfqVs0K/view?usp=sharing">NIFTY50 1min Interval OHLC&lt;/a>&lt;/p>
&lt;p>&lt;code>config.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;algo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;algorithms/3Reds.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;datasource&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;NIFTY50_1min.csv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;symbol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;NIFTY50&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;candles&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interval&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;quantity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;target&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;stoploss&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;is_trailing_sl&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;trailing_sl_val&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;sliding&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;intraday&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;skip_header&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>run algoticks from the command line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">./algoticks
&lt;/code>&lt;/pre>&lt;/div>&lt;p>to enable debug (this shows Target Hits, SL hits, TSL Adjustments, etc..)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">./algoticks -D
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On completion of the simulation, a &lt;code>result.csv&lt;/code> is generated with results pertaining to completed simulation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">algo,pnl,datasource,symbol,candles,interval,target,stoploss,is_trailing_sl,trailing_sl_val,quantity,sliding,intraday,buy_signals,sell_signals,neutral_signals,trgt_hits,sl_hits,b_trgt_hits,s_trgt_hits,b_sl_hits,s_sl_hits,peak,bottom
algorithms/3Reds.so,-319344.750000,NIFTY50_1min.csv,NIFTY50,3,0,50.000000,75.000000,1,25.000000,100,0,0,0,380,1119,89,253,0,89,0,253,127930.085938,-346939.656250
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="benchmark">Benchmark&lt;/h2>
&lt;p>Algoticks has the ability to perform hundreds of simulation to choose the best one.&lt;/p>
&lt;p>benchmark mode can be enabled using command line arg &lt;code>-B&lt;/code>&lt;/p>
&lt;p>&lt;code>benchmark.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;algo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;algorithms/3Greens.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;algorithms/3Reds.so&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;datasource&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;example.csv&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;symbol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;SUNPHARMA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;candles&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;interval&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;quantity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;target&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mf">1.5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">2.5&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;stoploss&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">2.5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">3.5&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;is_trailing_sl&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;trailing_sl_val&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;sliding&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;intraday&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;skip_header&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A &lt;code>results.csv&lt;/code> is generated with all the simulation results.&lt;/p>
&lt;h2 id="livemode">LiveMode&lt;/h2>
&lt;p>Alogticks can detect and work with live updated datasource(s).&lt;/p>
&lt;p>This gives the ability to monitor and test real-time market data.&lt;/p>
&lt;p>this feature can be enabled using &lt;code>-L&lt;/code> command line arg.&lt;/p>
&lt;p>example:&lt;/p>
&lt;p>&lt;code>./algoticks -l&lt;/code>&lt;/p>
&lt;p>What this essentially does is that, on hitting EOF, the program will repeatedly check for file modification in datasource, if it detects any modification, it reloads the file and continues execution.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Algoticks is a result of almost a month of programming, tweaking and debugging. The idea was first implemented in python but the speed is not great, thus it will never see the light of the public. This is made with a vision to be very fast, compact, and robust compared to the initial python mock project.&lt;/p>
&lt;p>Good day. ðŸ˜Š&lt;/p></description></item></channel></rss>