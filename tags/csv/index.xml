<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSV on &lt;stdin></title><link>https://stdin.top/tags/csv/</link><description>Recent content in CSV on &lt;stdin></description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 14 Jun 2020 23:32:29 +0530</lastBuildDate><atom:link href="https://stdin.top/tags/csv/index.xml" rel="self" type="application/rss+xml"/><item><title>Reading CSV files in C</title><link>https://stdin.top/posts/csv-in-c/</link><pubDate>Sun, 14 Jun 2020 23:32:29 +0530</pubDate><guid>https://stdin.top/posts/csv-in-c/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this, I will show you how to read CSV files in C.&lt;/p>
&lt;h1 id="examplecsv">Example.csv&lt;/h1>
&lt;p>Let&amp;rsquo;s take a look at &lt;code>example.csv&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">date,open,high,low,close,volume
2020-03-11 09:15:00,26272.75,26453.65,26241.5,26443.85,0
2020-03-11 09:16:00,26447.1,26542.2,26423.6,26520.45,0
2020-03-11 09:17:00,26526.75,26543.15,26465.55,26522.15,0
2020-03-11 09:18:00,26531.3,26556,26504.55,26543.95,0
2020-03-11 09:19:00,26544.55,26633.85,26544.55,26633.85,0
2020-03-11 09:20:00,26633.9,26676.1,26619.15,26647.05,0
2020-03-11 09:21:00,26647,26654.5,26611.7,26652.6,0
2020-03-11 09:22:00,26659.05,26698.1,26646.7,26690.25,0
2020-03-11 09:23:00,26691.9,26711.9,26649.5,26659.1,0
2020-03-11 09:24:00,26659,26784.2,26659,26753.85,0
2020-03-11 09:25:00,26751.9,26767.95,26721.1,26727.3,0
2020-03-11 09:26:00,26729.95,26742.45,26684.55,26688.4,0
2020-03-11 09:27:00,26684.25,26751.25,26670.4,26728.15,0
2020-03-11 09:28:00,26727.9,26768.1,26725.8,26755.95,0
2020-03-11 09:29:00,26755.65,26779.7,26755.65,26760.65,0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is an example of OHLC data - &lt;strong>O&lt;/strong>pen &lt;strong>H&lt;/strong>igh &lt;strong>L&lt;/strong>ow &lt;strong>C&lt;/strong>lose Data. This type of data is widely used to represent movement in a financial instruments. we will use this example data to demonstrate how to read CSV files in C.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;ul>
&lt;li>gcc version 10.1.0 (GCC)&lt;/li>
&lt;/ul>
&lt;h1 id="hello-world">Hello World&lt;/h1>
&lt;p>CSV stands for &lt;strong>C&lt;/strong>omma &lt;strong>S&lt;/strong>eparated &lt;strong>V&lt;/strong>alues.
The process of reading CSV can be broken down into two steps:&lt;/p>
&lt;ul>
&lt;li>Read a line -&amp;gt; &lt;code>L&lt;/code>&lt;/li>
&lt;li>Split &lt;code>L&lt;/code> by &lt;code>,&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Now, you have the values of the row.&lt;/p>
&lt;hr>
&lt;h1 id="reading-a-line">Reading a line&lt;/h1>
&lt;p>we use &lt;code>fgets()&lt;/code> from &lt;code>string.h&lt;/code>.&lt;/p>
&lt;h3 id="lets-demonstrate-this">let&amp;rsquo;s demonstrate this.&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define MAXCHAR 1000
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXCHAR&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;example.csv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">feof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXCHAR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Row: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="output">Output&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Row: date,open,high,low,close,volume
Row: 2020-03-11 09:15:00,26272.75,26453.65,26241.5,26443.85,0
Row: 2020-03-11 09:16:00,26447.1,26542.2,26423.6,26520.45,0
Row: 2020-03-11 09:17:00,26526.75,26543.15,26465.55,26522.15,0
Row: 2020-03-11 09:18:00,26531.3,26556,26504.55,26543.95,0
Row: 2020-03-11 09:19:00,26544.55,26633.85,26544.55,26633.85,0
Row: 2020-03-11 09:20:00,26633.9,26676.1,26619.15,26647.05,0
Row: 2020-03-11 09:21:00,26647,26654.5,26611.7,26652.6,0
Row: 2020-03-11 09:22:00,26659.05,26698.1,26646.7,26690.25,0
Row: 2020-03-11 09:23:00,26691.9,26711.9,26649.5,26659.1,0
Row: 2020-03-11 09:24:00,26659,26784.2,26659,26753.85,0
Row: 2020-03-11 09:25:00,26751.9,26767.95,26721.1,26727.3,0
Row: 2020-03-11 09:26:00,26729.95,26742.45,26684.55,26688.4,0
Row: 2020-03-11 09:27:00,26684.25,26751.25,26670.4,26728.15,0
Row: 2020-03-11 09:28:00,26727.9,26768.1,26725.8,26755.95,0
Row: 2020-03-11 09:29:00,26755.65,26779.7,26755.65,26760.65,0%
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="tokenizing">Tokenizing&lt;/h1>
&lt;p>Tokenizing is the processing of splitting a string by any given character, in our case we want to split it by &lt;code>,&lt;/code>.&lt;/p>
&lt;p>we use &lt;code>strtok()&lt;/code> from &lt;code>string.h&lt;/code>&lt;/p>
&lt;h3 id="code">code&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define MAXCHAR 1000
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXCHAR&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">token&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;example.csv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">feof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXCHAR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Row: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strtok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">token&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Token: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strtok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="output-1">Output&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Row: date,open,high,low,close,volume
Token: date
Token: open
Token: high
Token: low
Token: close
Token: volume
Row: 2020-03-11 09:15:00,26272.75,26453.65,26241.5,26443.85,0
Token: 2020-03-11 09:15:00
Token: 26272.75
Token: 26453.65
Token: 26241.5
Token: 26443.85
Token: 0
Row: 2020-03-11 09:16:00,26447.1,26542.2,26423.6,26520.45,0
Token: 2020-03-11 09:16:00
Token: 26447.1
Token: 26542.2
Token: 26423.6
Token: 26520.45
Token: 0
Row: 2020-03-11 09:17:00,26526.75,26543.15,26465.55,26522.15,0
Token: 2020-03-11 09:17:00
Token: 26526.75
Token: 26543.15
Token: 26465.55
Token: 26522.15
Token: 0
Row: 2020-03-11 09:18:00,26531.3,26556,26504.55,26543.95,0
Token: 2020-03-11 09:18:00
Token: 26531.3
Token: 26556
Token: 26504.55
Token: 26543.95
Token: 0
Row: 2020-03-11 09:19:00,26544.55,26633.85,26544.55,26633.85,0
Token: 2020-03-11 09:19:00
Token: 26544.55
Token: 26633.85
Token: 26544.55
Token: 26633.85
Token: 0
....
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;div class="notices note" >&lt;p>For large CSV files, it&amp;rsquo;s advisable to read using a combination of &lt;code>fseek()&lt;/code> and &lt;code>ftell()&lt;/code>&lt;/p>&lt;/div></description></item></channel></rss>