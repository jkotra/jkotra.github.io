<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on &lt;stdin></title><link>https://stdin.top/posts/</link><description>Recent content in Posts on &lt;stdin></description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 22 Jan 2023 11:25:10 +0530</lastBuildDate><atom:link href="https://stdin.top/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Storing Array in MySQL with Rust + SeaORM</title><link>https://stdin.top/posts/mysql-array-seaorm/</link><pubDate>Sun, 22 Jan 2023 11:25:10 +0530</pubDate><guid>https://stdin.top/posts/mysql-array-seaorm/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>MySQL does not support arrays. You must be wondering then how it is still the most popular database that does not have a very essential type of data representation out of the box. I would argue, there are benefits to sticking to basic datatypes and allowing users to represent their data as they wish (such as an array) using constraints. I will demonstrate one such common technique here to store array data with help of Foreign Key Constraint. Usually, this representation is automatically generated in some frameworks, for example, spring boot with the &lt;code>ddl-auto&lt;/code> option. However, In a rust ecosystem, things are usually verbose, requiring the programmer to know and understand the representation logic and layout of storing data in DB.&lt;/p>
&lt;p>For this tutorial, I use Rust and seaorm as Object Relation Mapper. Article Assumes working knowledge of seaorm syntax (&lt;a href="https://www.sea-ql.org/sea-orm-tutorial/">Official SeaORM tutorial&lt;/a>).&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;div class="notices note" >&lt;p>&lt;a href="https://github.com/jkotra/seaorm-mysql-array">Code on Github&lt;/a>&lt;/p>&lt;/div>
&lt;ol>
&lt;li>Clone &lt;code>seaorm-mysql-array&lt;/code> (see &lt;code>note&lt;/code> above)&lt;/li>
&lt;li>log in to your MySQL console and create a table named &lt;code>emp_db&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-SQL" data-lang="SQL">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DATABASE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">emp_db&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>run seaorm migrations. This will drop-create tables.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="nv">DATABASE_URL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;mysql://root:password@localhost:3306/emp_db&amp;#34;&lt;/span> sea-orm-cli migrate refresh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: Replace &lt;code>root&lt;/code> and &lt;code>password&lt;/code> with your credentials respectively.&lt;/p>
&lt;p>now, you can run the program with &lt;code>cargo run&lt;/code>. Use &lt;code>--&lt;/code> after to pass arguments to the app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">cargo run
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Err! PROGRAM [show|add|rm {id}|clean]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>App has the following operation:&lt;/p>
&lt;p>&lt;code>add&lt;/code> - Add Employee&lt;/p>
&lt;p>&lt;code>rm {id}&lt;/code> - Remove Employee and his projects who has &lt;code>{id}&lt;/code>&lt;/p>
&lt;p>&lt;code>clean&lt;/code> - remove all.&lt;/p>
&lt;p>&lt;code>show&lt;/code> - show/find all.&lt;/p>
&lt;p>An example interaction output is as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">Employee Name:
Jagadeesh
Employee Projects &lt;span class="o">[&lt;/span>seperated by comma&lt;span class="o">(&lt;/span>,&lt;span class="o">)]&lt;/span>:
Blog, Taxes
constructed &lt;span class="nv">object&lt;/span> &lt;span class="o">=&lt;/span> EmployeeModel &lt;span class="o">{&lt;/span> id: 0, name: &lt;span class="s2">&amp;#34;Jagadeesh&amp;#34;&lt;/span>, projects: &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;Blog&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34; Taxes&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">}&lt;/span>
employee Jagadeesh inserted with &lt;span class="nv">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">24&lt;/span>
project Blog inserted with &lt;span class="nv">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">29&lt;/span>
project Taxes inserted with &lt;span class="nv">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">30&lt;/span>
&lt;span class="o">===&lt;/span> ALL DATA &lt;span class="nv">length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">1&lt;/span> &lt;span class="o">===&lt;/span>
EmployeeModel &lt;span class="o">{&lt;/span> id: 24, name: &lt;span class="s2">&amp;#34;Jagadeesh&amp;#34;&lt;/span>, projects: &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;Blog&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34; Taxes&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">===&lt;/span> END ALL &lt;span class="nv">DATA&lt;/span> &lt;span class="o">===&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>refer to the &lt;a href="https://github.com/jkotra/seaorm-mysql-array">source code&lt;/a> to peek behind the curtains ;)&lt;/p>
&lt;h2 id="storing-array-data">Storing Array Data&lt;/h2>
&lt;p>First, we need to define our model at the highest level, the one that we are going to use in our rust app. I defined my &lt;code>Employee&lt;/code> Model as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="cp">#[derive(Debug, Default)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">EmployeeModel&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="kt">i64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">projects&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A very simple model, with an &lt;code>id&lt;/code>, &lt;code>name&lt;/code>, and &lt;code>projects&lt;/code> he has been assigned to.&lt;/p>
&lt;p>In the earlier section, we ran migration on DB. It is nothing but creating the schema. The schema of the table &lt;code>Employee&lt;/code> can be seen in &lt;code>migration/src/m_17012023_000001_create_employee.rs&lt;/code>. An excerpt is given below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sea_orm_migration&lt;/span>::&lt;span class="n">prelude&lt;/span>::&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="cp">#[derive(DeriveMigrationName)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Migration&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="cp">#[async_trait::async_trait]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MigrationTrait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Migration&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">up&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">manager&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">SchemaManager&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DbErr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="hl">&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">manager&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">create_table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Table&lt;/span>::&lt;span class="n">create&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Employee&lt;/span>::&lt;span class="n">Table&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ColumnDef&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Employee&lt;/span>::&lt;span class="n">Id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">not_null&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">17&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">auto_increment&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">primary_key&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">19&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">20&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ColumnDef&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Employee&lt;/span>::&lt;span class="n">Name&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">not_null&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">down&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">manager&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">SchemaManager&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DbErr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">manager&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">drop_table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Table&lt;/span>::&lt;span class="nb">drop&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Employee&lt;/span>::&lt;span class="n">Table&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">32&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="sd">/// Learn more at https://docs.rs/sea-query#iden
&lt;/span>&lt;span class="ln">34&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="cp">#[derive(Iden)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">36&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Table&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">37&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">38&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">39&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Similarly, We use the &lt;code>projects&lt;/code> table to store multiple projects assigned to an employee.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">super&lt;/span>::&lt;span class="n">m_17012023_000001_create_employee&lt;/span>::&lt;span class="n">Employee&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sea_orm_migration&lt;/span>::&lt;span class="n">prelude&lt;/span>::&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="cp">#[derive(DeriveMigrationName)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Migration&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="cp">#[async_trait::async_trait]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MigrationTrait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Migration&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">up&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">manager&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">SchemaManager&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DbErr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">manager&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">create_table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Table&lt;/span>::&lt;span class="n">create&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Projects&lt;/span>::&lt;span class="n">Table&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ColumnDef&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Projects&lt;/span>::&lt;span class="n">Id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">not_null&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">auto_increment&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">primary_key&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="hl">&lt;span class="ln">21&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ColumnDef&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Projects&lt;/span>::&lt;span class="n">EmpId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">not_null&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">22&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">foreign_key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">23&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ForeignKey&lt;/span>::&lt;span class="n">create&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">24&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;fk-emp-projects&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">25&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Projects&lt;/span>::&lt;span class="n">Table&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Projects&lt;/span>::&lt;span class="n">EmpId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">26&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Employee&lt;/span>::&lt;span class="n">Table&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>::&lt;span class="n">Id&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">27&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ColumnDef&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Projects&lt;/span>::&lt;span class="n">Seq&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">not_null&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ColumnDef&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Projects&lt;/span>::&lt;span class="n">Value&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">not_null&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">34&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">down&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">manager&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">SchemaManager&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DbErr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">36&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">manager&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">37&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">drop_table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Table&lt;/span>::&lt;span class="nb">drop&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Projects&lt;/span>::&lt;span class="n">Table&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">to_owned&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">38&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">39&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">40&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">41&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">42&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="cp">#[derive(Iden)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">43&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">Projects&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">44&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Table&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">45&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="hl">&lt;span class="ln">46&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">EmpId&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">47&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Seq&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="hl">&lt;span class="ln">48&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;span class="ln">49&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Points to note in the above code:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>Employee&lt;/code> has the following columns - &lt;code>id&lt;/code>, &lt;code>name&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Projects&lt;/code> has the following columns:&lt;/p>
&lt;ol>
&lt;li>&lt;code>Id&lt;/code>&lt;/li>
&lt;li>&lt;code>EmpId&lt;/code> - Foreign Key&lt;/li>
&lt;li>&lt;code>Seq&lt;/code> - Sequence / Index&lt;/li>
&lt;li>&lt;code>Value&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Foreign Key&lt;/code> Relation from &lt;code>Employee::Id&lt;/code> to &lt;code>Projects::EmpId&lt;/code>. This Constraint makes sure that an employee cannot be deleted while corresponding projects exist, thus ensuring data integrity.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The combination of &lt;code>Employee&lt;/code> and &lt;code>Projects&lt;/code> tables gives us &lt;code>EmployeeModel&lt;/code> that we defined in the beginning.&lt;/p>
&lt;p>
&lt;img src="https://stdin.top/images/F26YnMf.png" alt="ER Diagram">
&lt;/p>
&lt;h3 id="inserting-employee">Inserting Employee&lt;/h3>
&lt;p>Take a look at the &lt;code>insert&lt;/code> fn of our app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">emp&lt;/span>: &lt;span class="nc">EmployeeModel&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DbErr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_db&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">employee&lt;/span>::&lt;span class="n">ActiveModel&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>: &lt;span class="nc">ActiveValue&lt;/span>::&lt;span class="n">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">emp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">()),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="nb">Default&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ires&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>::&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;employee {} inserted with id = {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">emp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ires&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">last_insert_id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="n">emp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">projects&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proj_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">emp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">projects&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proj_name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i_proj&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">projects&lt;/span>::&lt;span class="n">ActiveModel&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">emp_id&lt;/span>: &lt;span class="nc">ActiveValue&lt;/span>::&lt;span class="n">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ires&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">last_insert_id&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">seq&lt;/span>: &lt;span class="nc">ActiveValue&lt;/span>::&lt;span class="n">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>: &lt;span class="nc">ActiveValue&lt;/span>::&lt;span class="n">Set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proj_name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">()),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="nb">Default&lt;/span>::&lt;span class="n">default&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">inserted&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Projects&lt;/span>::&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i_proj&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;project {} inserted with id = {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proj_name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">inserted&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">last_insert_id&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(())&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First, we take &lt;code>EmployeeModel&lt;/code> as an argument, this is generated from user input by &lt;code>add_emp&lt;/code> fn. Next, We insert &lt;code>e&lt;/code> into the &lt;code>employee&lt;/code> table (Needs to be converted to &lt;code>ActivateModel&lt;/code>).&lt;/p>
&lt;p>inserted id is stored as &lt;code>ires&lt;/code> (&lt;code>ires.last_insert_id&lt;/code>), This will be used as &lt;code>EmpId&lt;/code> for projects related to this employee.&lt;/p>
&lt;p>A range-based loop is used to insert projects into the &lt;code>projects&lt;/code> table.&lt;/p>
&lt;h3 id="removing-employee">Removing Employee&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">remove_emp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DbErr&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;removing employee with id = {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_db&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Projects&lt;/span>::&lt;span class="n">delete_many&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">projects&lt;/span>::&lt;span class="n">Column&lt;/span>::&lt;span class="n">EmpId&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employee&lt;/span>::&lt;span class="n">delete_by_id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(())&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Removing an employee is relatively string forward. Note that we need to remove the projects before the employee itself because of Foreign Key Relationship.&lt;/p>
&lt;hr>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>MySQL is the most popular DB for a lot of use cases. Though, it&amp;rsquo;s only a piece of cake if specific language tools are made to deal with complex data structures and data representations not supported by MySQL by default. If you are looking to start a project in rust and are confused as to which DB to choose, the community recommends PostgreSQL (which has native support for array).&lt;/p></description></item><item><title>Formatting Code in VScode</title><link>https://stdin.top/posts/vscode-formatting/</link><pubDate>Thu, 21 Apr 2022 02:48:44 +0530</pubDate><guid>https://stdin.top/posts/vscode-formatting/</guid><description>&lt;h1 id="why">Why?&lt;/h1>
&lt;p>I used to (and still do) refer to a lot of documentation and code samples, there&amp;rsquo;s one thing that is common in all of them, every single one of them is formatted as per some rule (such as &lt;code>PEP8&lt;/code> for python) that gives it a consistent look and feel, this makes it easier to read logic of the code instead of getting distracted with the styling of syntax.&lt;/p>
&lt;p>Some unsung advantages of formatting are:&lt;/p>
&lt;ul>
&lt;li>uniform style and feel to code.&lt;/li>
&lt;li>automatically fix trailing and dangling spaces.&lt;/li>
&lt;li>it is &lt;em>required&lt;/em> that code be formatted in a specific way in many situations such as contributing to open source projects.&lt;/li>
&lt;/ul>
&lt;h1 id="vscode">VScode&lt;/h1>
&lt;figure>
&lt;img src="https://stdin.top/images/MJn7wQY.png" height="128px" width="128px" alt="VSCode Logo">
&lt;figcaption>VSCode Logo&lt;/figcaption>
&lt;/figure>
&lt;p>VScode has the option to format your code on save as well as manually (&lt;em>Shift + Ctrl + I&lt;/em>) or through Power Menu.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a &lt;code>.vscode/settings.json&lt;/code> on your project root folder if it does not already exist.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>put the following &lt;code>JSON&lt;/code> in &lt;code>settings.json&lt;/code> file.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln">1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;#34;editor.defaultFormatter&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ms-vscode.cpptools&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="hl">&lt;span class="ln">4&lt;/span> &lt;span class="nt">&amp;#34;editor.formatOnSave&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;span class="ln">5&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>here, &lt;code>editor.defaultFormatter&lt;/code> is the formatter with which you want your code to be formatted. There are different formatters available for every language for example &lt;a href="https://clang.llvm.org/docs/ClangFormat.html">clang-format&lt;/a> is very popular among C/C++ projects and &lt;a href="https://prettier.io/">Pretter&lt;/a> is a goto formatter for all things Javascript (incl. Typescript)&lt;/p>
&lt;p>&lt;code>editor.formatOnSave&lt;/code> : weather to automatically formats the code on saving of the file.&lt;/p>
&lt;p>To see all the available formatters go to &lt;code>File -&amp;gt; Preferences -&amp;gt; Settings&lt;/code> and search for &amp;ldquo;Default Formatter&amp;rdquo;. IN the dropdown menu you can find all the available formatters. use your preferred and compatible formatter value in your &lt;code>settings.json&lt;/code>&lt;/p>
&lt;figure>
&lt;img src="https://stdin.top/images/bTDWeG4.png" height="256" width="256" alt="Available Formatters in VSCode">
&lt;figcaption>Available Formatters in VSCode&lt;/figcaption>
&lt;/figure>
&lt;p>You can get more formatters in &lt;a href="https://marketplace.visualstudio.com/vscode">VSCode Maketplace&lt;/a> (Aka. Extensions).&lt;/p>
&lt;h1 id="prettier">Prettier&lt;/h1>
&lt;p>
&lt;figure>
&lt;img src="https://stdin.top/images/sP3e1ph.png" alt="">
&lt;figcaption>Prettier Formatting&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Prettier is a popular choice for many Javascript developers. I use prettier in my React Native Code to keep my JSX readable.&lt;/p>
&lt;ol>
&lt;li>Install Prettier from Extensions.&lt;/li>
&lt;li>An example&lt;code>.prettierrc.js&lt;/code> file looks like this:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">module.exports = {
bracketSpacing: false,
jsxBracketSameLine: true,
singleQuote: true,
trailingComma: &amp;#39;all&amp;#39;,
printWidth: 120,
arrowParens: &amp;#39;always&amp;#39;,
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://prettier.io/docs/en/index.html">Read Prettier Documentation&lt;/a>&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>A good developer not only writes logical code but also writes beautiful readable code to make it easier to read for others. Formatting is the eraser to automatically remove scratch marks on our beautiful painting 😊.&lt;/p></description></item><item><title>Eclipse IDE Essentials</title><link>https://stdin.top/posts/eclipse-essentials/</link><pubDate>Thu, 17 Mar 2022 14:14:03 +0530</pubDate><guid>https://stdin.top/posts/eclipse-essentials/</guid><description>&lt;p>
&lt;figure>
&lt;img src="https://stdin.top/images/ucKScjF.png" alt="My Eclipse setup">
&lt;figcaption>My eclipse IDE&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this article, I will briefly go over settings and modifications to eclipse IDE that is essential in my opinion to work smoothly with various projects and look closer to a modern-day IDE.&lt;/p>
&lt;p>I&amp;rsquo;d recommend going with the &lt;a href="https://www.eclipse.org/downloads/">vanilla version&lt;/a> of Eclipse IDE, it comes with bare essentials. anything/everything else can be installed through eclipse marketplace/plugins.&lt;/p>
&lt;hr>
&lt;h1 id="essential-settings--options">Essential Settings &amp;amp; Options&lt;/h1>
&lt;h3 id="content-assist">Content Assist&lt;/h3>
&lt;p>
&lt;figure>
&lt;img src="https://stdin.top/images/KOGUReO.png" alt="Content Assist in Action">
&lt;figcaption>Content Assist in Action&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Content Assist (or) Auto Complete is an essential part of any IDE. It is enabled by default but proposals might be unchecked (depends on your edition, of course).&lt;/p>
&lt;p>&lt;em>Window-&amp;gt;Preferences-&amp;gt;Editor-&amp;gt;Content Assist-&amp;gt;Advanced&lt;/em>&lt;/p>
&lt;p>enable the following under &lt;strong>Default Proposal Kinds&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Java Proposals&lt;/li>
&lt;li>Template Proposals&lt;/li>
&lt;/ul>
&lt;p>enable the following under &lt;strong>Content Assist cycling&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Java Type Proposals&lt;/li>
&lt;li>Template Proposals&lt;/li>
&lt;li>Language Server Proposals&lt;/li>
&lt;/ul>
&lt;p>you can sort the above as per your liking, generally eclipse to smart enough to suggest the best match at the top without manual intervention.&lt;/p>
&lt;hr>
&lt;h3 id="content-assist-triggers">Content Assist Triggers&lt;/h3>
&lt;p>it&amp;rsquo;s always a good idea to trigger auto complete on every character (like in every other IDE!) and not just the default &lt;code>.&lt;/code> character.&lt;/p>
&lt;p>&lt;em>Window-&amp;gt;Preferences-&amp;gt;Editor-&amp;gt;Content Assist-&amp;gt;Auto Activation&lt;/em>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>enable auto activation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>to trigger content assist on all common key presses, paste the following into &lt;em>Auto Activation Triggers for Java&lt;/em>:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;code>.@_abcdefghijklmnopqrstuvwxyz&lt;/code>&lt;/p>
&lt;hr>
&lt;h3 id="enable-oomph-recorder">Enable Oomph Recorder&lt;/h3>
&lt;p>Some settings in eclipse are not persisted through a restart. we have to enable &lt;em>Oomph recorder&lt;/em> that will save our settings permanently.&lt;/p>
&lt;p>&lt;em>Window-&amp;gt;Preferences-&amp;gt;Oomph&lt;/em>&lt;/p>
&lt;hr>
&lt;h1 id="color-themes">Color Themes&lt;/h1>
&lt;p>&lt;a href="">Top 12 Eclipse IDE Themes&lt;/a>
| &lt;a href="https://web.archive.org/web/20220318170730/https://www.tabnine.com/blog/top-eclipse-ide-themes/">archive.org mirror&lt;/a>&lt;/p>
&lt;div class="notices tip" >&lt;p>&lt;p>If you are using Linux and especially Gnome DE, the dark theme of the eclipse while the system is using a light variant theme seems broken. one way to mitigate this is to use the &lt;code>GTK_THEME&lt;/code> environment variable to force eclipse to use a dark theme for its components.&lt;/p>
&lt;p>&lt;code>GTK_THEME=Adwaita:dark ./eclipse&lt;/code>&lt;/p>
&lt;/p>&lt;/div>
&lt;p>These color themes work best with &lt;a href="https://marketplace.eclipse.org/content/darkest-dark-theme-devstyle">Darkest Dark Theme with DevStyle&lt;/a> plugin. It also brings with it modern icons and tries to polish some rough edges. Using the above color themes with the default Light/Dark theme may result in broken HTML and XML foreground and background.&lt;/p>
&lt;hr>
&lt;h1 id="plugins">Plugins&lt;/h1>
&lt;h3 id="web-development">Web Development&lt;/h3>
&lt;p>&lt;a href="https://marketplace.eclipse.org/content/eclipse-web-developer-tools-0">Eclipse Web Developer Tools&lt;/a>&lt;/p>
&lt;p>&lt;strong>Eclipse Web Developer Tools&lt;/strong> given all the necessary support for common types of web files you may encounter like HTML, CSS or YAML, etc&amp;hellip;&lt;/p>
&lt;p>you can install plugins from the Eclipse marketplace (&lt;em>Help-&amp;gt;Eclipse Marketplace&lt;/em>).&lt;/p>
&lt;p>You may also want to install features from EE edition that are not part of the plugin, these include specific wizards.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Select your version from &lt;a href="https://download.eclipse.org/releases/">releases page&lt;/a>. Copy the URL.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Navigate to &lt;em>Help-&amp;gt;Install New Software&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Paste the URL in &lt;strong>Work with&lt;/strong> field.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;figure>
&lt;img src="https://stdin.top/images/4xNnBtk.png" alt="">
&lt;figcaption>Install New Software Window&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;ol start="4">
&lt;li>Select &lt;code>Web, XML, Java EE and OSGi Enterprise Development&lt;/code> and install it.&lt;/li>
&lt;/ol>
&lt;h3 id="misc">Misc.&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://projectlombok.org/setup/eclipse">Lombak&lt;/a> - Automatically generates getters and setters when a class is annotated with &lt;code>@Data&lt;/code>. Also provides other convenient annotations.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Eclipse is hard on the beginner&amp;rsquo;s often overwhelming them with many options and (tiny!) icons. it&amp;rsquo;s worth it to get familiarized with eclipse as it&amp;rsquo;s the go-to choice of many small/medium/startups who are cost-conscious.&lt;/p></description></item><item><title>mmap - one-liner to read file to string</title><link>https://stdin.top/posts/mmap/</link><pubDate>Tue, 22 Feb 2022 01:39:15 +0530</pubDate><guid>https://stdin.top/posts/mmap/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;code>mmap&lt;/code> stands for memory map. the declaration&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> is given below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/mman.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">mmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">prot&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">off_t&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">munmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>My article is partly inspired by &lt;a href="https://www.youtube.com/channel/UCwd5VFu4KoJNjkWJZMFJGHQ">Jacob Sorber&amp;rsquo;s&lt;/a> &lt;a href="https://www.youtube.com/watch?v=m7E9piHcfr4">How to Map Files into Memory in C (mmap, memory mapped file io)&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="mmap-vs-other-ways">mmap vs. other ways&lt;/h1>
&lt;p>there are several ways to read files in C, none you could do without several line of code and iteration. the quickest approach would be &lt;code>fgets()&lt;/code> within a loop. &lt;code>mmap&lt;/code> offers a simple one-liner. recently I&amp;rsquo;ve been working with OpenCL, which is known for its unconventional practice to load kernel as a string and compile and run it during runtime.&lt;/p>
&lt;p>
&lt;img src="https://media.giphy.com/media/sEJ2j80ZmgXPOlEYEt/giphy.gif" alt="">
&lt;/p>
&lt;hr>
&lt;h2 id="reading-file-to-string-with-mmap">reading file to string with mmap&lt;/h2>
&lt;p>we need to know the exact size of the file we are going to read. we can do that with &lt;code>stat&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/mman.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">k_fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;kernel.cl&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_RDONLY&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">stat&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">fstat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">st_size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>then we need to allocate memory and call &lt;code>mmap&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">kernelSource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">mmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">st_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PROT_READ&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAP_PRIVATE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;file content = %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">kernelSource&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>mmap&lt;/code> returns a void pointer, it&amp;rsquo;s necessary to cast it to a &lt;code>char *&lt;/code>.&lt;/p>
&lt;hr>
&lt;h1 id="conclusion">Conclusion.&lt;/h1>
&lt;p>It looks better and feels good (at least to me 😉) than other ways of reading files. sharing this short example with others who might be looking for it.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://man7.org/linux/man-pages/man2/mmap.2.html">https://man7.org/linux/man-pages/man2/mmap.2.html&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Install thelounge on Raspberry Pi Zero</title><link>https://stdin.top/posts/thelounge-on-rpi-zero/</link><pubDate>Sun, 16 Jan 2022 19:20:12 +0530</pubDate><guid>https://stdin.top/posts/thelounge-on-rpi-zero/</guid><description>&lt;p>
&lt;figure>
&lt;img src="https://stdin.top/images/thelounge.png" alt="">
&lt;figcaption>thelounge running on my Raspberry Pi Zero W&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This is a short tutorial to install &lt;a href="https://thelounge.chat/">thelounge&lt;/a> on &lt;a href="https://www.raspberrypi.com/products/raspberry-pi-zero-w/">Raspberry Pi Zero / W&lt;/a>. I assume you have already set up your rpi and connected to the internet.&lt;/p>
&lt;h1 id="1-installing-dependencies">1. Installing dependencies&lt;/h1>
&lt;p>&lt;a href="https://thelounge.chat/">thelounge&lt;/a> depends on &lt;code>nodejs&lt;/code> LTS or greater. current &lt;code>nodejs&lt;/code> LTS version is 17.x (as of writing this article) but only 12.x is available in raspbian OS repository. even though, nodejs discontinued &lt;em>official&lt;/em> support for &lt;code>armv6&lt;/code>, we can still get precompiled binaries from &lt;a href="https://unofficial-builds.nodejs.org/">unoffical builds&lt;/a>. just don&amp;rsquo;t expect any kind of support if you run into any problems 😑️&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://unofficial-builds.nodejs.org/download/release/v17.4.0/">Download&lt;/a> &lt;em>nodejs&lt;/em> LTS for armv6.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">wget https://unofficial-builds.nodejs.org/download/release/v17.4.0/node-v17.4.0-linux-armv6l.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>extract the downloaded file.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">tar -xvf node-v17.4.0-linux-armv6l.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>install&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="nb">cd&lt;/span> node-v17.4.0-linux-armv6l
sudo cp * -R /usr
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>confirm by checking version&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">node -v
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="2-install-yarn">2. Install yarn&lt;/h1>
&lt;p>&lt;code>nodejs&lt;/code> is prepackaged with &lt;code>npm&lt;/code> package manager. we can use &lt;code>npm&lt;/code> to install &lt;code>yarn&lt;/code> which is recommended to use with &lt;code>thelounge&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">sudo npm install yarn --global
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="3-install-thelounge">3. install thelounge&lt;/h1>
&lt;div class="notices tip" >&lt;p>&lt;p>I recommend setting a static IP to your rpi. this makes it easier to access services hosted on our pi with a single memorable address (usually &lt;em>192.168.x.x&lt;/em>)&lt;/p>
&lt;p>&lt;a href="https://www.makeuseof.com/raspberry-pi-set-static-ip/">How Do I Set a Static IP Address on Raspberry Pi?&lt;/a>&lt;/p>
&lt;/p>&lt;/div>
&lt;ol>
&lt;li>
&lt;p>get latest .deb from &lt;a href="https://github.com/thelounge/thelounge/releases">github release page&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>as we installed &lt;code>nodejs&lt;/code> from an unofficial source (and not through &lt;code>apt&lt;/code> package manager), it will not satisfy the &lt;code>nodejs&lt;/code> requirement of &lt;code>.deb&lt;/code> file. we can skip dependency checks in two ways.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>force &lt;code>dpkg&lt;/code>
&lt;ul>
&lt;li>&lt;code>dpkg --force-all -i thelounge.deb&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>(OR)&lt;/em>&lt;/p>
&lt;ul>
&lt;li>edit &lt;code>.deb&lt;/code> dependencies
&lt;ul>
&lt;li>&lt;a href="https://forums.linuxmint.com/viewtopic.php?t=35136">How To: Change .deb Package Dependencies&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>add (default) user to &lt;code>thelounge&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">sudo thelounge add ircuser
&lt;/code>&lt;/pre>&lt;/div>&lt;p>it will prompt for a password, choose any password. you can then head to &lt;code>http://192.168.x.x:9000&lt;/code> and log in.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>A suggestion in good faith: don&amp;rsquo;t buy &lt;code>armv6&lt;/code> boards. they are already obsolete and as time goes on, compatible software will be hard t come by.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://thelounge.chat/docs/install-and-upgrade#debian-and-ubuntu-based-distributions">thelounge documentation&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Getting Started with GTK4 on Windows</title><link>https://stdin.top/posts/gtk4-on-windows/</link><pubDate>Sat, 04 Sep 2021 23:16:02 +0000</pubDate><guid>https://stdin.top/posts/gtk4-on-windows/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This article guides how to set up and write applications with GTK4 on the windows operating system.&lt;/p>
&lt;h1 id="gtk">GTK&lt;/h1>
&lt;p>
&lt;img src="https://www.gtk.org/assets/img/logo-gtk-sm.png" alt="https://www.gtk.org/assets/img/logo-gtk-sm.png">
&lt;/p>
&lt;p>GTK (formerly GIMP ToolKit then GTK+) is a free and open-source cross-platform widget toolkit for creating graphical user interfaces (GUIs).&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/GTK#Windows">[wikipedia]&lt;/a> &lt;a href="https://gtk.org">[Official Website]&lt;/a>&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;div class="notices info" >&lt;p>&lt;p>GTK can also be compiled with MSVC / Visual Studio. while compiling with MSVC makes it more compatible with the Visual Studio ecosystem, it limits the libraries we can include in our project. mixing MSYS2 and MSVC libraries cause problems.&lt;/p>
&lt;p>To compile with MSVC:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://download.gnome.org/sources/gtk/">Get the latest tarball&lt;/a>.&lt;/li>
&lt;li>Run the following Commands:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">meson setup -Dmedia-gstreamer=disabled -Dbuild-tests=disabled build
meson compile -C build
meson install -C build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Refer: &lt;a href="https://www.collabora.com/news-and-blog/blog/2021/03/18/build-and-run-gtk-4-applications-with-visual-studio/">Build and run GTK 4 applications with Visual Studio&lt;/a>&lt;/p>
&lt;/p>&lt;/div>
&lt;h3 id="msys2">MSYS2&lt;/h3>
&lt;p>&lt;strong>MSYS2&lt;/strong> is a collection of tools and libraries providing you with an easy-to-use environment for building, installing, and running native Windows software.&lt;/p>
&lt;ol>
&lt;li>Install the latest version MSYS2 &lt;a href="https://www.msys2.org/">from their website&lt;/a>.&lt;/li>
&lt;li>Navigate to &lt;code>C:\msys2\&lt;/code> and launch &lt;code>mingw64.exe&lt;/code>.&lt;/li>
&lt;li>to update available repositories and packages, run:
&lt;code>pacman -Syyu&lt;/code>&lt;/li>
&lt;li>install &lt;code>gtk4&lt;/code>, &lt;code>gcc&lt;/code> (&lt;code>llvm&lt;/code> should work too!), &lt;code>pkg-config&lt;/code>:
&lt;code>pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-gtk4 mingw-w64-x86_64-pkg-config&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>Now add Mingw64 directories to System Path so that windows can find them:
add the following to the system path:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">C:\\msys64\\mingw64\\include
C:\\msys64\\mingw64\\bin
C:\\msys64\\mingw64\\lib
&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;img src="https://stdin.top/images/9nD9ZCp.png" alt="/images/9nD9ZCp.png">
&lt;/p>
&lt;ol>
&lt;li>We also need to pass the output of &lt;code>pkg-config&lt;/code> to &lt;code>gcc&lt;/code> while compiling. firstly, open &lt;code>CMD&lt;/code> and get the output of &lt;code>pkg-config --cflags --libs gtk4&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>It will produce something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">-mfpmath=sse -msse -msse2 -pthread -mms-bitfields -IC:/msys64/mingw64/include/gtk-4.0 -IC:/msys64/mingw64/include -IC:/msys64/mingw64/include/pango-1.0 -IC:/msys64/mingw64/include/harfbuzz -IC:/msys64/mingw64/include/pango-1.0 -IC:/msys64/mingw64/include/fribidi -IC:/msys64/mingw64/include -IC:/msys64/mingw64/include/gdk-pixbuf-2.0 -IC:/msys64/mingw64/include/libpng16 -IC:/msys64/mingw64/include -IC:/msys64/mingw64/include/cairo -IC:/msys64/mingw64/include/lzo -IC:/msys64/mingw64/include -IC:/msys64/mingw64/include/freetype2 -IC:/msys64/mingw64/include/libpng16 -IC:/msys64/mingw64/include/harfbuzz -IC:/msys64/mingw64/include -IC:/msys64/mingw64/include/pixman-1 -IC:/msys64/mingw64/include -IC:/msys64/mingw64/include/graphene-1.0 -IC:/msys64/mingw64/lib/graphene-1.0/include -IC:/msys64/mingw64/include -IC:/msys64/mingw64/include/glib-2.0 -IC:/msys64/mingw64/lib/glib-2.0/include -IC:/msys64/mingw64/include -LC:/msys64/mingw64/lib -lgtk-4 -lpangowin32-1.0 -lpangocairo-1.0 -lpango-1.0 -lharfbuzz -lgdk_pixbuf-2.0 -lcairo-gobject -lcairo -lvulkan -lgraphene-1.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0 -lintl
&lt;/code>&lt;/pre>&lt;/div>&lt;p>copy the output and add it as a System Variable (I saved it as &lt;code>GTK4-PKG-CONFIG&lt;/code>):&lt;/p>
&lt;p>
&lt;img src="https://stdin.top/images/oxcoJbA.png" alt="/images/oxcoJbA.png">
&lt;/p>
&lt;h3 id="visual-studio-code">Visual Studio Code&lt;/h3>
&lt;p>I prefer Visual studio code for all my coding tasks. You can get the latest version of Visual studio code &lt;a href="https://code.visualstudio.com/">from their website&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>Create a new folder and open it in VSCode.&lt;/li>
&lt;li>create a new file &lt;code>.vscode/c_cpp_properties.json&lt;/code> and put the following in it:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;configurations&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Win32&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;includePath&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;${workspaceFolder}\\**&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;C:\\msys64\\mingw64\\include\\**&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;C:\\msys64\\mingw64\\lib\\glib-2.0\\include&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;C:\\msys64\\mingw64\\lib\\graphene-1.0\\include&amp;#34;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>notice the &lt;code>C:\msys64\mingw64\include\**&lt;/code>, &lt;code>C:\msys64\mingw64\lib\glib-2.0\include&lt;/code> and &lt;code>C:\msys64\mingw64\lib\graphene-1.0\include&lt;/code>. these are the header files we need for auto complete suggestions which will make our life easier.&lt;/p>
&lt;ol start="3">
&lt;li>create a new file, &lt;code>hello_world.c&lt;/code> file, and paste the &lt;code>Hello World&lt;/code> C program from &lt;a href="https://gtk.org">GTK.org&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// Include gtk
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;gtk/gtk.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">on_activate&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GtkApplication&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Create a new window
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">GtkWidget&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">window&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gtk_application_window_new&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// Create a new button
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">GtkWidget&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gtk_button_new_with_label&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// When the button is clicked, close the window passed as an argument
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">g_signal_connect_swapped&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">button&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;clicked&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G_CALLBACK&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">gtk_window_close&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">window&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gtk_window_set_child&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GTK_WINDOW&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">window&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">button&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gtk_window_present&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GTK_WINDOW&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">window&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Create a new application
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">GtkApplication&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gtk_application_new&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;com.example.GtkApplication&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">G_APPLICATION_FLAGS_NONE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">g_signal_connect&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;activate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G_CALLBACK&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">on_activate&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">g_application_run&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">G_APPLICATION&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Compile the program:
&lt;code>gcc hello_world.c -o hello_world.exe -mwindows %GTK4-PKG-CONFIG%&lt;/code>&lt;/li>
&lt;li>Run the program by clicking on generated &lt;code>.exe&lt;/code> file.&lt;/li>
&lt;/ol>
&lt;p>
&lt;img src="https://stdin.top/images/oHf7ZqG.png" alt="/images/oHf7ZqG.png">
&lt;/p>
&lt;div class="notices note" >&lt;p>&lt;p>If you are running Windows on a &lt;strong>virtual machine&lt;/strong> and facing any issues with rendering such as bulky black borders, use &lt;code>CAIRO&lt;/code> backend for now. support for VGPU (provided by the hypervisor) is very basic and unstable.&lt;/p>
&lt;p>&lt;code>$env:GSK_RENDERER = &amp;quot;CAIRO&amp;quot;&lt;/code>&lt;/p>
&lt;/p>&lt;/div>
&lt;h3 id="debugging">Debugging&lt;/h3>
&lt;p>Setting up debugging enviroment is quite easy. Defaults should just work fine as long as you select the correct compiler when prompted, I&amp;rsquo;ve added &lt;code>-mwindows&lt;/code> to compile flags for good measure.&lt;/p>
&lt;p>&lt;code>.vscode/launch.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;configurations&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;gcc.exe - Build and debug active file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;cppdbg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;request&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;launch&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;program&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;${fileDirname}\\${fileBasenameNoExtension}.exe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;args&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="nt">&amp;#34;stopAtEntry&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cwd&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;${fileDirname}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;environment&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;span class="nt">&amp;#34;externalConsole&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;MIMode&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;gdb&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;miDebuggerPath&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C:\\msys64\\mingw64\\bin\\gdb.exe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;setupCommands&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Enable pretty-printing for gdb&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;-enable-pretty-printing&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;ignoreFailures&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;preLaunchTask&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C/C++: gcc.exe build active file&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>.vscode/tasks.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;tasks&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;cppbuild&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;label&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C/C++: gcc.exe build active file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;command&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;C:\\msys64\\mingw64\\bin\\gcc.exe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;args&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;-g&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;${file}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;-o&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;${fileDirname}\\${fileBasenameNoExtension}.exe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;-mwindows&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;%GTK4-PKG-CONFIG%&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;options&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;cwd&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;${fileDirname}&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;problemMatcher&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;$gcc&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;group&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;kind&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;build&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;isDefault&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;detail&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Task generated by Debugger.&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2.0.0&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add breakpoint wherever you wish and debug away!&lt;/p>
&lt;p>
&lt;img src="https://stdin.top/images/QVZD3Bq.png" alt="/images/QVZD3Bq.png">
&lt;/p>
&lt;h2 id="a-bit-complicated-example">A bit complicated example&amp;hellip;&lt;/h2>
&lt;p>Let&amp;rsquo;s make things a little complicated, suppose we want to make an application to show the current time using Win32 API, this is how it can be done:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;windows.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;gtk/gtk.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">get_current_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GtkButton&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">btn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GtkLabel&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">SYSTEMTIME&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Button Clicked!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">GetSystemTime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">st&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">GetLocalTime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">lt&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%02d:%02d:%02d %d/%d/%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wHour&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wMinute&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wSecond&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wDay&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wMonth&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wYear&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gtk_label_set_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">on_activate&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GtkApplication&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Create a new window
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">GtkWidget&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">window&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gtk_application_window_new&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">GtkWidget&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">box&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gtk_box_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GTK_ORIENTATION_VERTICAL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">GtkWidget&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">label&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gtk_label_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello GTK!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">GtkWidget&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">btn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gtk_button_new_with_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Get Current Time&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gtk_widget_set_margin_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GTK_WIDGET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">btn&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gtk_widget_set_margin_end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GTK_WIDGET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">btn&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">g_signal_connect_after&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">btn&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;clicked&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GCallback&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">get_current_time&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gtk_box_append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GTK_BOX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">box&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gtk_box_append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GTK_BOX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">box&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">btn&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gtk_window_set_child&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GTK_WINDOW&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">window&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">box&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gtk_window_present&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">GTK_WINDOW&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">window&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Create a new application
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">GtkApplication&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gtk_application_new&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;com.example.GtkApplication&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">G_APPLICATION_FLAGS_NONE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">g_signal_connect&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;activate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G_CALLBACK&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">on_activate&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">g_application_run&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">G_APPLICATION&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compile the program with:&lt;/p>
&lt;p>&lt;code>gcc whatismytime.c -o whatismytime -mwindows %GTK4-PKG-CONFIG%&lt;/code>&lt;/p>
&lt;p>
&lt;img src="https://stdin.top/images/YURHuEM.png" alt="/images/YURHuEM.png">
&lt;/p>
&lt;h3 id="meson-build-system">Meson Build System&lt;/h3>
&lt;p>&lt;a href="https://github.com/jkotra/WhatIsMyTime">Available on Github&lt;/a>.&lt;/p>
&lt;p>Meson is the official build system used by GNOME. I&amp;rsquo;ve taken the above example and made it into a Meson Project.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">tree
├── meson.build
├── README.md
└── src
├── meson.build
└── whatismytime.c
1 directory, 4 files
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="notices info" >&lt;p>&lt;code>meson&lt;/code> uses &lt;code>ninja&lt;/code> to build/compile. get the latest &lt;code>ninja&lt;/code> from &lt;a href="https://github.com/ninja-build/ninja/releases">their Github page&lt;/a> and add the extracted directory to System Path.&lt;/p>&lt;/div>
&lt;p>to build:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">meson build
ninja -C build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and then navigate to &lt;code>build/src&lt;/code> and execute &lt;code>whatismytime.exe&lt;/code>&lt;/p></description></item><item><title>Making the best PDF Unlocker / Decryptor App</title><link>https://stdin.top/posts/pdfunlockr-technical-essay/</link><pubDate>Fri, 23 Jul 2021 00:08:43 +0530</pubDate><guid>https://stdin.top/posts/pdfunlockr-technical-essay/</guid><description>&lt;p>&lt;a href='https://play.google.com/store/apps/details?id=com.pdfunlockr&amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'>&lt;img height="192px" width="192px" alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png'/>&lt;/a>&lt;/p>
&lt;h2 id="preface">Preface&lt;/h2>
&lt;p>My foray into React native happened approximately a month before of publishing date of this article, I know of very little javascript (non ES6) and almost a &lt;em>newb&lt;/em> with React ecosystem. It almost felt like an adventure, after many months developing and improving my libraries and application written in a language(s) I&amp;rsquo;m comfortable with.&lt;/p>
&lt;p>As of writing this, I feel like a pro of javascript. No wonder JS rules across the tech industry, the ease of learning makes it easy for a beginner like me. Even though I&amp;rsquo;m no stranger to the programming paradigm, it must be said that JS(ES6 variant) is the easiest to write, debug and extend.&lt;/p>
&lt;p>With a mixture of learning &lt;a href="https://www.newline.co/fullstack-react-native/">from a book&lt;/a>, &lt;a href="https://www.udemy.com/course/react-native-the-practical-guide/">Udemy course&lt;/a>, and tinkering around with examples, I made a simple app to view semester results of my university. It&amp;rsquo;s now &lt;a href="https://play.google.com/store/apps/details?id=com.ouresults">available on the Google play store&lt;/a>.&lt;/p>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>You have a pdf file, and it has a password. The aim is to generate a new file from input with password / any other encryption removed.&lt;/p>
&lt;h3 id="but-why">But why?&lt;/h3>
&lt;p>In general, it&amp;rsquo;s a hassle to enter the password every time you need to view it. The default PDF viewer on android does not have a feature to remember passwords.&lt;/p>
&lt;p>Often, Financial institutions request bank statements other KYC documents which are often encrypted with a password(for example, eAadhar in India). There are several tools available online with varying downsides. I discussed these issues in the section below.&lt;/p>
&lt;h2 id="competition-research">Competition Research&lt;/h2>
&lt;p>A &lt;a href="https://play.google.com/store/search?q=pdf%20unlocker">search&lt;/a> for &amp;ldquo;&lt;em>pdf unlocker&lt;/em>&amp;rdquo; on google play store returns at least 6 that claim to do the job. But after I tested each one of them(excluding corporate type, discussed in next paragraph) I find their functionality ranging from unusable to badly designed UI to just crash. I don&amp;rsquo;t want to take the name of the developers here, I have immense respect for my colleagues in the trades irrespective of skill. The problem is quite possibly API and old age(depreciation). Many years after writing this article, my app might as well join them becoming unusable, the trick here is to use a newer SDK for future-proofing. I have a good feeling this is good for at least the next 4-5 Android versions. For this reason, &lt;code>PDFUnlockR&lt;/code> requires a minimum SDK of 24 (API) (Android 7)&lt;/p>
&lt;p>Those which work and look nice are the corporate variety. An example is &lt;a href="https://play.google.com/store/apps/details?id=com.smallpdf.app.android&amp;amp;hl=en_IN&amp;amp;gl=US">Smallpdf&lt;/a> and &lt;a href="https://play.google.com/store/apps/details?id=com.ilovepdf.www&amp;amp;hl=en_IN&amp;amp;gl=US">iLovePDF&lt;/a>. Both of these are in a way more than a tool, they have a business model, charging users money if they exceed a certain limit of files. I feel this is a very dubious practice because of two reasons, they offer no value and little convenience, just jump on a computer and there are many programs to decrypt unlimited no. of files with no catch. 2nd reason is even though a guess, they are probably using some open-source library under the hood. The license of said Open source library may even explicitly prohibit profiting from their code.&lt;/p>
&lt;h2 id="uiux-design">UI/UX Design&lt;/h2>
&lt;p>The basic structure of &lt;code>PDFUnlockR&lt;/code> consists of mainly 3 screens.&lt;/p>
&lt;ul>
&lt;li>&lt;code>Home / Queue&lt;/code>&lt;/li>
&lt;li>&lt;code>Processing &lt;/code>&lt;/li>
&lt;li>&lt;code>Decrypt(Final Results) &lt;/code>&lt;/li>
&lt;/ul>
&lt;p>
&lt;img src="https://stdin.top/images/fBTnKbV.png" alt="">
&lt;/p>
&lt;p>Components used are a combination of vanilla react native and &lt;a href="https://callstack.github.io/react-native-paper/">react-native-paper&lt;/a>&lt;/p>
&lt;h2 id="the-best-pdf-library---qpdf-theres-a-problem-though">the best PDF library - QPDF. There&amp;rsquo;s a problem though&amp;hellip;&lt;/h2>
&lt;p>I&amp;rsquo;m quite confident QPDF is the best &lt;em>opensource&lt;/em> PDF library out there. The emphasis on open-source is important here, during my research I&amp;rsquo;ve encountered many closed source libraries with java bindings(that would have made my life easier, not having to deal with JNI). The problem is that QPDF is a c++ library and the way to connect it with java is through JNI(Java Native Interface)&lt;/p>
&lt;h3 id="cross-compiling-qpdf-to-multiple--cpu-architectures">Cross Compiling QPDF to multiple CPU architectures.&lt;/h3>
&lt;p>We first need to compile the library into a shared object(&lt;code>.so&lt;/code>) file to include in our project.&lt;/p>
&lt;p>From &lt;code>android/app/gradle.build&lt;/code> we can specify the architectures we can target:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gradle" data-lang="gradle"> &lt;span class="n">externalNativeBuild&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">cmake&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">cppFlags&lt;/span> &lt;span class="s2">&amp;#34;-O2 -frtti -fexceptions -Wall -fstack-protector-all&amp;#34;&lt;/span>
&lt;span class="n">abiFilters&lt;/span> &lt;span class="s1">&amp;#39;x86&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s1">&amp;#39;x86_64&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s1">&amp;#39;armeabi-v7a&amp;#39;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s1">&amp;#39;arm64-v8a&amp;#39;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, I&amp;rsquo;ve chosen to use the library for all 4 (&lt;code>'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'&lt;/code>) architecture, cross-compiling is pretty straightforward once you figure out ins and outs of NDK compilers.&lt;/p>
&lt;p>&lt;a href="https://sourceforge.net/projects/qpdf/files/qpdf/">QPDF&lt;/a> depends on one other library:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.ijg.org/files/jpegsrc.v9d.tar.gz">libjpeg&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;ve included links to gists of bash scripts to cross-compile these dependencies and also &lt;code>qpdf&lt;/code> itself.&lt;/p>
&lt;p>&lt;a href="https://gist.github.com/jkotra/75d6ceedbd472583bc80c584347999f8">Github Gist&lt;/a>&lt;/p>
&lt;div class="notices note" >&lt;p>for every change in &lt;code>targetSdkVersion&lt;/code> and &lt;code>compileSdkVersion&lt;/code>, QPDF need to be recompiled again to prevent app from crashing on invoking native code.&lt;/p>&lt;/div>
&lt;div class="notices note" >&lt;p>&lt;p>compilation of QPDF will fail during cross-compilation due to its inability to confirm the existence of &lt;code>/dev/urandom&lt;/code>. This check must be disabled in &lt;code>configure&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="c1">#ln 16476 - version - 10.3.2&lt;/span>
&lt;span class="nb">test&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$cross_compiling&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span> no &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>&lt;/div>
&lt;p>Running the above bash scripts should produce binary &lt;code>.so&lt;/code> for each architecture.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">.
├── arm64-v8a
│   ├── libjpeg.so
│   └── libqpdf.so
├── armeabi-v7a
│   ├── libjpeg.so
│   └── libqpdf.so
├── x86
│   ├── libjpeg.so
│   └── libqpdf.so
└── x86_64
├── libjpeg.so
└── libqpdf.so
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="jni--ndk">JNI + NDK&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Java_Native_Interface">JNI&lt;/a> stands for &lt;strong>J&lt;/strong>ava &lt;strong>N&lt;/strong>ative &lt;strong>I&lt;/strong>nterface. &lt;a href="https://developer.android.com/ndk">NDK&lt;/a> (&lt;strong>N&lt;/strong>ative &lt;strong>D&lt;/strong>evelopment &lt;strong>K&lt;/strong>it) is what allows us to run C++ natively on the android platform.&lt;/p>
&lt;p>JNI acts as a bridge between java and NDK/C++.&lt;/p>
&lt;h2 id="stitching-it-all-together">Stitching it all together&lt;/h2>
&lt;p>The process of putting all these together starts with the bottom, our pure C++ library which uses &lt;code>qpdf&lt;/code> to decrypt the file.&lt;/p>
&lt;div class="notices warning" >&lt;p>&lt;p>&lt;strong>Update [30/01/2022]&lt;/strong>&lt;/p>
&lt;p>Passing file descriptor to C++ seems to cause problems with &lt;code>targetSdkVersion&lt;/code> &amp;gt;= 30 due to &lt;a href="https://android.googlesource.com/platform/bionic/+/master/docs/fdsan.md">fdsan&lt;/a>. I solved this issue by reading the file on java side and passing &lt;code>byteArray&lt;/code> to JNI and further. Refer &lt;a href="https://developer.android.com/reference/android/content/ContentResolver#openInputStream(android.net.Uri)">ContentResolver&lt;/a>.&lt;/p>
&lt;/p>&lt;/div>
&lt;p>An excerpt is given below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">decryptPDF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">QPDF&lt;/span> &lt;span class="n">qpdf&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">__android_log_print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ANDROID_LOG_DEBUG&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">APPNAME&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;received inputs: %s %s %zu %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">qpdf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">processMemoryFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filename&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">QPDFWriter&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qpdf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="n">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setPreserveEncryption&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">exception&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">__android_log_print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ANDROID_LOG_DEBUG&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">APPNAME&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Decrypt Error: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">what&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="k">throw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next comes the JNI C++, which acts as a glue between java and our code mentioned above:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span>
&lt;span class="n">JNIEXPORT&lt;/span> &lt;span class="n">jboolean&lt;/span> &lt;span class="n">JNICALL&lt;/span>
&lt;span class="n">Java_com_pdfunlockr_QPDFModule_decryptPDF&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JNIEnv&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jclass&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jbyteArray&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jstring&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jlong&lt;/span> &lt;span class="n">pdf_size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jstring&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jstring&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input_fname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetStringUTFChars&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">passwd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetStringUTFChars&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetStringUTFChars&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jbyte&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">f_bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">GetByteArrayElements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">JNI_FALSE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">pdf_size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">decryptPDF&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">f_bytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_fname&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">passwd&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">exception&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ReleaseByteArrayElements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f_bytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">JNI_ABORT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">jclass&lt;/span> &lt;span class="n">exp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">FindClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;java/lang/Exception&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ThrowNew&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">what&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="n">env&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ReleaseByteArrayElements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">f_bytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">JNI_ABORT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">jboolean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, these native functions can be used in java, and using React native modules, these wrapped methods can be invoked from javascript.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@ReactMethod&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">QPDFdecryptPDF&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">file_uri&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">pdf_size&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Promise&lt;/span> &lt;span class="n">promise&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">Uri&lt;/span> &lt;span class="n">uri&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Uri&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parse&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">file_uri&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ContentResolver&lt;/span> &lt;span class="n">resolver&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContentResolver&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">output_file&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">output_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ctx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCacheDir&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getAbsolutePath&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;/&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">InputStream&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">resolver&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">openInputStream&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">uri&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">is&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">available&lt;/span>&lt;span class="o">()];&lt;/span>
&lt;span class="n">is&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">is&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">available&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">lsize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Long&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">parseLong&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">pdf_size&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">decryptPDF&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">lsize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">output_file&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">is&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">promise&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">resolve&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">output_file&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">Log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">d&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;PDFUnlockr&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">promise&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">native&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">decryptPDF&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">pdf_size&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="notices tip" >&lt;p>Refer to &lt;a href="https://reactnative.dev/docs/native-modules-android">RN Documentation&lt;/a> on how to bridge &lt;code>Java &amp;lt;-&amp;gt; Javascript&lt;/code>.&lt;/p>&lt;/div>
&lt;div class="notices info" >&lt;p>My code is highly inspired at initial setup stage by &lt;a href="https://github.com/reime005/react-native-cpp-code">reime005&amp;rsquo;s react-native-cpp-code&lt;/a>&lt;/p>&lt;/div>
&lt;div class="notices note" >&lt;p>&lt;p>Exception handling is a &lt;strong>MUST&lt;/strong> if you want to remain sane during the development. Without exception handling, if an error occurs, the app abruptly crashes.&lt;/p>
&lt;p>The only way to debug what caused the crash is to look for hints in &lt;code>adb logcat&lt;/code>.this ordeal is comparable to finding a needle in a haystack.&lt;/p>
&lt;/p>&lt;/div>
&lt;h2 id="monetization">Monetization&lt;/h2>
&lt;p>I placed just 2 ads.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/admob/android/banner">Banner Ad&lt;/a> in Processing Screen&lt;/li>
&lt;li>&lt;a href="https://developers.google.com/admob/android/interstitial">Interstitial Ad&lt;/a> on final/decrypt stage&lt;/li>
&lt;/ul>
&lt;p>There&amp;rsquo;s a lot of ad placement potential in here, At this point, I don&amp;rsquo;t feel like adding more ads that might make the app less functional and annoying.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Over and all, I&amp;rsquo;m still surprised how fast this whole journey has been thanks to JS. Considering how little if anything about making apps before jumping in just a week ago. I still do not know a lot of vanilla java / Kotlin principles and practices. This is not a deficiency of me or a supposedly steep learning curve of Vanilla Android Development, rather the point here is that &lt;strong>React Native just WORKS!&lt;/strong>&lt;/p></description></item><item><title>Algoticks v2.0 - improving memory efficiency</title><link>https://stdin.top/posts/algoticks_2.0/</link><pubDate>Wed, 17 Mar 2021 01:24:18 +0000</pubDate><guid>https://stdin.top/posts/algoticks_2.0/</guid><description>&lt;p>&lt;a href="https://github.com/jkotra/algoticks">Github&lt;/a>&lt;/p>
&lt;hr>
&lt;p>it&amp;rsquo;s been in my mind for a few months, but I always said &amp;ldquo;&lt;em>it&amp;rsquo;s just a few megabytes pff&lt;/em>. 😑&amp;rdquo; and kept on postponing it. one fine day, I started branch &lt;code>2.0&lt;/code> and finally started to refactor my code, most of it is converting stack allocation to heap allocation.&lt;/p>
&lt;h1 id="what-changed">What changed?&lt;/h1>
&lt;p>to start with, most of the memory is now allocated on the heap rather than the stack. this has some performance gains but not much compared to humongous memory savings compared to the previous version(s). &lt;em>algoticks v2.0&lt;/em> uses less than &lt;strong>110%&lt;/strong> less memory.&lt;/p>
&lt;p>some other significant changes were:&lt;/p>
&lt;ul>
&lt;li>sending callbacks is now much simplified.&lt;/li>
&lt;li>JSON parsing code has been moved to src/parser.c.&lt;/li>
&lt;li>a bug with &lt;code>sync_curr&lt;/code> has been fixed. presence of this bug might have produced false results with derivative + benchmark mode.&lt;/li>
&lt;li>string length restrictions are virtually gone, the length is calculated at runtime, and memory allocated appropriately&lt;/li>
&lt;li>memory-efficient &lt;em>==&lt;/em> embedded friendly (more on that later!)&lt;/li>
&lt;/ul></description></item><item><title>Porting (coinflip-gtk) to GTK4</title><link>https://stdin.top/posts/experience_porting_gtk4/</link><pubDate>Fri, 19 Feb 2021 19:50:28 +0530</pubDate><guid>https://stdin.top/posts/experience_porting_gtk4/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Recently, I decided to fix some lingering bugs in my toy project &lt;a href="https://github.com/jkotra/coinflip-gtk">coinflip-gtk&lt;/a> which I made a few months back to get a taste of GTK. this coincided with the release of GTK4(actually it released a few months earlier but it&amp;rsquo;s still was very new and very few apps are ported to GTK4 from GTK3). I&amp;rsquo;ve successfully ported my small toy example to gtk4. This blog summarizes my experiences.&lt;/p>
&lt;h2 id="ui">UI&lt;/h2>
&lt;p>The topic of whether to use RAD tool (Glade) or not is a hot debate in the Gnome community&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. I went with the suggestion that is given to all the beginners i.e use glade. It took a few days to get hold of it esp. the spacing mechanism, it&amp;rsquo;s not as user-friendly as Qt Creator AFAIR.&lt;/p>
&lt;p>It Turned out glade files are for the most part incompatible with GTK4 as-it-is. a renowned developer even made a blog post&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> about why glade is BAD and you should write XML by hand instead.&lt;/p>
&lt;p>Gtk developers provide a tool &lt;code>gtk4-builder-tool&lt;/code> that is intended to fix issues in &lt;code>.ui&lt;/code>/&lt;code>.glade&lt;/code> files.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Usage:
gtk-builder-tool [COMMAND] [OPTION…] FILE
Commands:
validate Validate the file
simplify Simplify the file
enumerate List all named objects
preview Preview the file
Simplify Options:
--replace Replace the file
--3to4 Convert from GTK 3 to GTK 4
Preview Options:
--id=ID Preview only the named object
--css=FILE Use style from CSS file
Perform various tasks on GtkBuilder .ui files.
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="notices note" >&lt;p>from my experience, converting/fixing glade files is hit or miss for unknown reasons. I&amp;rsquo;ve noticed that it tends to produce good results when there is only one window per file.&lt;/p>&lt;/div>
&lt;h2 id="code">Code&lt;/h2>
&lt;p>The first obvious thing one would notice is that there is no &lt;code>gtk_builder_connect_signals()&lt;/code>. All signals are connected by default.&lt;/p>
&lt;p>another important thing to note is the introduction of &lt;code>GdkTexture&lt;/code> which replaces &lt;code>GdkPixbuf.&lt;/code> &lt;a href="https://blog.gtk.org/2018/03/16/textures-and-paintables/">this change is explained by devs on the Gtk blog.&lt;/a>&lt;/p>
&lt;p>this creates a problem with the current implementation of about dialog in my app . in GTK4, &lt;code>gtk_about_dialog_set_logo&lt;/code> takes &lt;code>GdkPaintable&lt;/code> as input. The correct way to set logo is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">GdkTexture&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">about_logo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gdk_texture_new_from_resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/com/github/jkotra/coinflip/images/com.github.jkotra.coinflip.svg&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">gtk_about_dialog_set_logo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">about&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GDK_PAINTABLE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">about_logo&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="result">Result&lt;/h2>
&lt;p>The porting explained here is &lt;a href="https://github.com/jkotra/coinflip-gtk">available on Github&lt;/a>. (&lt;code>gtk4-port&lt;/code> branch)&lt;/p>
&lt;p>
&lt;img src="https://stdin.top/images/NMJ7cge.png" alt="">
&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://www.reddit.com/r/GTK/comments/jyf5lm/glade_not_recommended/">https://www.reddit.com/r/GTK/comments/jyf5lm/glade_not_recommended/&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://blogs.gnome.org/christopherdavis/2020/11/19/glade-not-recommended/">https://blogs.gnome.org/christopherdavis/2020/11/19/glade-not-recommended/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>What changed in WPC 1.0? a lot.</title><link>https://stdin.top/posts/what-changed-in-wpc-1.0-a-lot/</link><pubDate>Thu, 14 Jan 2021 02:07:19 +0530</pubDate><guid>https://stdin.top/posts/what-changed-in-wpc-1.0-a-lot/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;code>WPC 1.0&lt;/code> has been released and with a whole set of new features and most importantly readable, refactored and &lt;em>saner&lt;/em> code which should make things easy for any hackers/tinkerers out there.&lt;/p>
&lt;p>Compared to a mid-release (&lt;code>0.5&lt;/code>) which up to that point is pretty much bug fixing there are some noticeable new features to end user that started in &lt;code>0.5&lt;/code> and finally stable in &lt;code>1.0&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>Asynchronous downloads.&lt;/li>
&lt;li>Asynchronous API calls to &lt;a href="https://reddit.com/">Reddit&lt;/a> and Bing.&lt;/li>
&lt;li>download wallpapers from any subreddit. (&lt;code>--reddit&lt;/code>)&lt;/li>
&lt;li>convert image to grayscale before setting it as wallpaper (&lt;code>--grayscale&lt;/code>)&lt;/li>
&lt;li>filter based on the age of the file. (&lt;code>--maxage&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h1 id="refactoring">Refactoring&lt;/h1>
&lt;p>This took the most time, even more so than any feature. my decision(obviously not well thought of 😕) not to come up with a flexible design pattern at the start of the project led to this, something that looked worse than a script with hard interdependency. The refactoring is not necessary for working functionality but it&amp;rsquo;s of much significance if any more features are to be implemented(or removed) in the future.&lt;/p>
&lt;p>Much of &lt;code>main.rs&lt;/code> has been further cleaned. any new web plugins can be implemented in just a few lines of code as the process of downloading and saving the file(s) has been abstracted away to their respective files in the &lt;code>web&lt;/code> dir of the project.&lt;/p>
&lt;p>for example, in the previous versions, the &lt;code>main()&lt;/code> handled everything: the calls, parsing, downloading and it became a huge mess. with &lt;code>1.0&lt;/code> all of this has been abstracted into their respective file and &lt;code>main()&lt;/code> simply calls &lt;code>update()&lt;/code> on the struct, the arguments are all the same for all, &lt;code>savepath&lt;/code>, &lt;code>maxage&lt;/code>, and reference to &lt;code>WPCDebug&lt;/code> impl. which prints out messages if debug is enabled (&lt;code>-D&lt;/code>)&lt;/p>
&lt;p>an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Bing&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Bing&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">savepath&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">wpc_debug&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">WPCDebug&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file_list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">misc&lt;/span>::&lt;span class="n">download_wallpapers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">savepath&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">wpc_debug&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file_list&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_bing_wpod&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(a number too many to note down) small typos and bugs have been fixed to achieve what I believe is now feature complete. I don&amp;rsquo;t intend to do any radical/breaking changes, just enough bug fixes to keep it sweet, simple, and most importantly functional.&lt;/p>
&lt;p>a major reason for refactoring the code is also because of the prospect that web sources may die or change API among other zillion things that could go wrong when depending on 3rd party APIs. If I were to maintain this (i mostly use local images anyway), the Web API dependent code must be independent of the program itself to some degree and a clear distinction between OS API&amp;rsquo;s (the process of changing wallpaper for example, which is unlikely to change in future (hopefully 😉).&lt;/p>
&lt;div class="notices info" >&lt;p>Previous developments to WPC have been documented in &lt;a href="https://stdin.top/posts/wpc-overview">this&lt;/a> article.&lt;/p>&lt;/div></description></item><item><title>Hello CUDA!</title><link>https://stdin.top/posts/cuda-hello-world/</link><pubDate>Fri, 04 Dec 2020 18:47:53 +0530</pubDate><guid>https://stdin.top/posts/cuda-hello-world/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>CUDA is a parallel computing platform and application programming interface model created by Nvidia. It allows software developers and software engineers to use a CUDA-enabled graphics processing unit for general-purpose processing – an approach termed GPGPU.&lt;/p>
&lt;p>&lt;strong>CUDA&lt;/strong> programs are compiled using &lt;a href="https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html">NVCC&lt;/a>. NVCC is included with &lt;a href="https://developer.nvidia.com/cuda-toolkit">CUDA toolkit&lt;/a>.&lt;/p>
&lt;h2 id="building-blocks">Building Blocks&lt;/h2>
&lt;h3 id="block">Block&lt;/h3>
&lt;p>A group of threads is called a &lt;strong>CUDA block&lt;/strong>. &lt;strong>CUDA blocks&lt;/strong> are grouped into a grid. A kernel is executed as a grid of &lt;strong>blocks&lt;/strong> of threads&lt;/p>
&lt;h3 id="thread">Thread&lt;/h3>
&lt;p>&lt;code>Total no of Threads = No Blocks x Threads Per Block&lt;/code>&lt;/p>
&lt;hr>
&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;div class="notices note" >&lt;p>&lt;a href="https://github.com/jkotra/cuda_samples/tree/main/hello_world">Code on Github&lt;/a>&lt;/p>&lt;/div>
&lt;p>Demonstration and code walkthrough of a simple &lt;code>Hello World&lt;/code> program.&lt;/p>
&lt;p>To run this, clone the repository and run &lt;code>make&lt;/code> command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">__global__&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">from_gpu&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d, %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">blockIdx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">threadIdx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">from_gpu&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">cudaDeviceSynchronize&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">0, 0
0, 1
0, 2
0, 3
0, 4
0, 5
0, 6
....
....
....
7, 5
7, 6
7, 7
7, 8
7, 9
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="vector-addition">Vector Addition&lt;/h2>
&lt;div class="notices note" >&lt;p>&lt;a href="https://github.com/jkotra/cuda_samples/tree/main/vec_add">Code on Github&lt;/a>&lt;/p>&lt;/div>
&lt;p>To demonstrate the power of CUDA, let&amp;rsquo;s take &lt;strong>vector multiplication&lt;/strong> as an example.&lt;/p>
&lt;p>This example has 2 files:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jkotra/cuda_samples/blob/main/vec_add/vec_add.cpp">vec_add.cpp&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jkotra/cuda_samples/blob/main/vec_add/vec_add_k.cu">vec_add_k.cu&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;random&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;vec_add_k.cuh&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">generate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">](){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">generate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">](){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add_vec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;+&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In &lt;code>vec_add.cpp&lt;/code>, 2 vectors are defined and are filled with random numbers. These two vectors are then passed to CUDA kernel for computation.&lt;/p>
&lt;h3 id="cuda-kernel">CUDA Kernel&lt;/h3>
&lt;p>we start by importing standard library&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>create a function called &lt;code>add_vec&lt;/code> this takes in the vector from our program &lt;code>vec_add.cpp&lt;/code>&lt;/p>
&lt;p>declare variables for device storage. (&lt;code>d_a&lt;/code>, &lt;code>d_b&lt;/code>, &lt;code>d_c&lt;/code>)
to store the result, declare a variable &lt;code>c&lt;/code> and allocate memory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">add_vec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">d_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">d_b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">d_c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>compute the size of storage required, Note that we generated 100 randoms numbers each in both vectors.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>allocate memory to device variable&amp;rsquo;s using &lt;code>cudaMalloc()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp"> &lt;span class="n">cudaMalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d_b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d_c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Copy host variables into device variables:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp"> &lt;span class="n">cudaMemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cudaMemcpyHostToDevice&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cudaMemcpyHostToDevice&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cudaMemcpyHostToDevice&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally Launch the kernel:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">add_vec_cuda&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d_b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d_c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>the numbers inside the triple arrow i.e &lt;code>&amp;lt;&amp;lt;&amp;lt;&lt;/code> and &lt;code>&amp;gt;&amp;gt;&amp;gt;&lt;/code> define the size of the kernel, the above line will launch 1 block with 100 threads.&lt;/p>
&lt;p>&lt;a href="https://developer.nvidia.com/blog/cuda-refresher-cuda-programming-model/">More on it&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">__global__&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add_vec_cuda&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">blockDim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">blockIdx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadIdx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is where the magic happens, the result of the addition of vector(s) can be calculated independent of other elements in the array. Taking advantage of massive no of Cuda cores and threads, operations like these can be accelerated many times compared to a typical CPU.&lt;/p>
&lt;p>index can be calculated like below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">blockDim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">blockIdx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadIdx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is one of the main limitations of CUDA, things work a lit bit differently inside CUDA kernel.&lt;/p>
&lt;p>
&lt;img src="https://stdin.top/images/bsm1T76.png" alt="">
(Source&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>)&lt;/p>
&lt;p>&lt;code>if&lt;/code> condition is used to prevent memory overflow, this can be useful in the case of variable input size.&lt;/p>
&lt;p>Complete code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// vec_add_k.cu
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">__global__&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add_vec_cuda&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">blockDim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">blockIdx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadIdx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">add_vec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">d_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">d_b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">d_c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d_b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d_c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cudaMemcpyHostToDevice&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cudaMemcpyHostToDevice&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cudaMemcpyHostToDevice&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">add_vec_cuda&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d_b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d_c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaMemcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d_c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cudaMemcpyDeviceToHost&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaFree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaFree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cudaFree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d_c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="whats-next">What&amp;rsquo;s Next?&lt;/h2>
&lt;p>This post serves as an example-first intro to CUDA, I skipped a lot of jargon about CUDA and NVIDIA architecture. I intend to cover some important topics like Matrix Multiplication and Image processing in future articles :bowtie:&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="http://www.mat.unimi.it/users/sansotte/cuda/CUDA_by_Example.pdf">Jason Sanders, Edward Kandrot - CUDA by Example - An Introduction to General-Purpose GPU Programming (2010) - P71&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>MusicGenreClassification - Combining multiple features to make a better model</title><link>https://stdin.top/posts/musicgenreclassification-ensemble/</link><pubDate>Sat, 31 Oct 2020 23:13:27 +0530</pubDate><guid>https://stdin.top/posts/musicgenreclassification-ensemble/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This post is about the extension of my work in one of my projects &lt;a href="https://github.com/jkotra/MusicGenreClassification/">MusicGenreClassification&lt;/a> - a collection of methods to classify given audio clips into any of the 10 categories of &lt;a href="http://marsyas.info/downloads/datasets.html">GTZAN dataset&lt;/a> that it was trained on.&lt;/p>
&lt;h1 id="observations">Observations&lt;/h1>
&lt;p>in &lt;a href="https://github.com/jkotra/MusicGenreClassification/blob/master/MusicGenreClassification_FeatureEnsemble.ipynb">MusicGenreClassification_FeatureEnsemble.ipynb&lt;/a>, i combined multiple features of a audio clip to make a dataset. refer to &lt;a href="https://librosa.org/doc/latest/feature.html">librosa&lt;/a> documentaion for more details.&lt;/p>
&lt;p>running a Dense Network on this data, this proved to be the best model giving 5-7% more accurate results compared to previous models based on MEL.the best loss achieved with this model is &lt;code>0.9987499713897705&lt;/code>&lt;/p>
&lt;p>The accuracy graph of train and validation sets:&lt;/p>
&lt;p>
&lt;img src="https://stdin.top/images/uj6NOks.png" alt="accuracy graph">
&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://colab.research.google.com/drive/1F-wKKgE--e_EdY_ZO4jYTpkQJVtIwcHR?usp=sharing">&lt;img src="https://colab.research.google.com/assets/colab-badge.svg">&lt;/a>&lt;/p></description></item><item><title>Python Decorators demystified</title><link>https://stdin.top/posts/python-decorators/</link><pubDate>Sun, 27 Sep 2020 22:32:50 +0530</pubDate><guid>https://stdin.top/posts/python-decorators/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This is a short primer on &lt;a href="https://python101.pythonlibrary.org/chapter25_decorators.html">python decorators&lt;/a>. I will show 2 examples and walk you through it.&lt;/p>
&lt;h1 id="what-are-decorators">What are decorators?&lt;/h1>
&lt;p>As the name suggests, a decorator is a special type of function that decorates another function. Here, Decoration may mean extending functionality (or) preprocessing before passing it to the subject function. Using decorates is a nice abstraction that can be reused as needed.&lt;/p>
&lt;hr>
&lt;h2 id="example-1">Example 1&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">upperalpha&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">inner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">inner&lt;/span>
&lt;span class="nd">@upperalpha&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">proc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above code contains two functions, &lt;code>upperalpha&lt;/code> and &lt;code>proc&lt;/code>. Our aim is to decorate &lt;code>proc&lt;/code> with &lt;code>upperalpha&lt;/code>.&lt;/p>
&lt;p>we start by defining &lt;code>upperalpha&lt;/code> which takes a function(&lt;code>func&lt;/code>). we then define an inner function (&lt;code>inner&lt;/code>). Note that &lt;code>inner&lt;/code> takes the same argument as &lt;code>proc&lt;/code>. &lt;code>inner&lt;/code> contains the statements to &lt;em>decorate&lt;/em> the function. &lt;code>.upper()&lt;/code> is called on the string and passed on to &lt;code>func&lt;/code>(which simply returns whatever it received). Finally, &lt;code>inner&lt;/code> function is returned.&lt;/p>
&lt;p>in python, function(s) can be decorated using &lt;code>@DEC&lt;/code> syntax where &lt;code>DEC&lt;/code> is the name of the decorator.&lt;/p>
&lt;p>we finally run the &lt;code>proc&lt;/code> with &lt;code>Hello World&lt;/code>. the output will in capital letter because our decorator calls &lt;code>.upper()&lt;/code> on our input.&lt;/p>
&lt;h1 id="example-2">Example 2&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="k">def&lt;/span> &lt;span class="nf">init_mul&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">inner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">inner&lt;/span>
&lt;span class="nd">@init_mul&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">proc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I received&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">proc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s assume we want to multiply the input by a number before passing on to the function, while you can do this directly on a single function it&amp;rsquo;s not ideal to keep repeating &lt;code>n += n*100&lt;/code> everywhere. This is where &lt;code>init_mul&lt;/code> decorator comes in handy, just decorate the required function with &lt;code>@init_mul&lt;/code> and it will take care of the multiplication requirement.&lt;/p>
&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">I received 100
101
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>1&lt;/code> get&amp;rsquo;s multiplied by &lt;code>100&lt;/code> in the decorator and the original function is called on modified &lt;code>n&lt;/code> value.&lt;/p></description></item><item><title>Parse HTTPS website(s) in C with OpenSSL</title><link>https://stdin.top/posts/https_parse_openssl/</link><pubDate>Sun, 20 Sep 2020 20:07:40 +0530</pubDate><guid>https://stdin.top/posts/https_parse_openssl/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this article, I will explain how to parse a website that uses &lt;code>HTTPS&lt;/code>. in the process, one must get a grip on OpenSSL and integrating it with TCP (TLS) to retrieve content.&lt;/p>
&lt;h1 id="openssl">OpenSSL&lt;/h1>
&lt;blockquote>
&lt;p>OpenSSL is a software library for applications that secure communications over computer networks against eavesdropping or need to identify the party at the other end. It is widely used by Internet servers, including the majority of HTTPS websites.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/OpenSSL">Source&lt;/a>&lt;/p>
&lt;h2 id="parsing-from-https-website">Parsing from &lt;code>HTTPS&lt;/code> website&lt;/h2>
&lt;div class="notices note" >&lt;p>the code explained here can be found in my &lt;a href="https://github.com/jkotra/NetworkProgramming/blob/master/tls/get_https_webpage.c">NetworkProgramming GitHub repository&lt;/a>.&lt;/p>&lt;/div>
&lt;h3 id="tls">TLS&lt;/h3>
&lt;blockquote>
&lt;p>Transport Layer Security, and its now-deprecated predecessor, Secure Sockets Layer, are cryptographic protocols designed to provide communications security over a computer network. Several versions of the protocols find widespread use in applications such as web browsing, email, instant messaging, and voice over IP.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">Source&lt;/a>&lt;/p>
&lt;h3 id="walkthrough">Walkthrough&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;openssl/x509.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;openssl/crypto.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;openssl/pem.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;openssl/ssl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;openssl/err.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;openssl/evp.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/socket.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/select.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;netdb.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;errno.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We start by importing the required headers. Notice the OpenSSL headers, these contain essential functions to communicate securely with the website.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// ssl initialization.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SSL_library_init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">OpenSSL_add_all_algorithms&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>main()&lt;/code> function takes two arguments, a domain name/ IP and a port/protocol. SSL port is &lt;code>443&lt;/code>. we can also use &lt;code>https&lt;/code>(which defaults to &lt;code>443&lt;/code>) as the port. &lt;code>getaddrinfo()&lt;/code> will understand it either way.&lt;/p>
&lt;p>we need to initialize two functions, &lt;code>SSL_library_init()&lt;/code> will set up the environment to use other functions of OpenSSL. &lt;code>OpenSSL_add_all_algorithms()&lt;/code> will load required algorithms to encrypt, decrypt data and negotiate cipher with server.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">//init context
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SSL_CTX&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ctx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SSL_CTX_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TLS_client_method&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;cannot create SSL context!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>we then need to initialize a context using &lt;code>SSL_CTX_new()&lt;/code>. we pass a inbuilt constructor, &lt;code>TLS_client_method()&lt;/code> indicating that we expect a client functionality.&lt;/p>
&lt;div class="notices info" >&lt;p>&lt;p>&lt;code>TLS_method(), TLS_server_method(), TLS_client_method()&lt;/code>&lt;/p>
&lt;p>These are the general-purpose version-flexible SSL/TLS methods. The actual protocol version used will be negotiated to the highest version mutually supported by the client and the server. The supported protocols are SSLv3, TLSv1, TLSv1.1 and TLSv1.2. Applications should use these methods, and avoid the version-specific methods described below.&lt;/p>
&lt;p>&lt;a href="https://www.openssl.org/docs/man1.1.0/man3/TLS_client_method.html">Source&lt;/a>&lt;/p>
&lt;/p>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="cm">/* code taken from tcp_client_classic.c */&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_socktype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SOCK_STREAM&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;args: %s %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">getaddrinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;addrinfo() error!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">peer_addr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">peer_protocol&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">getnameinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addrlen&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer_addr&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">peer_protocol&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer_protocol&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">NI_NUMERICHOST&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ip: %s | protocol: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer_protocol&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//family socket_type protocol
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">socket_fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_family&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_socktype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_protocol&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;socket error.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addrlen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;connect error.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;connected!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* END */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above code is directly taken from &lt;code>tcp_client_classic.c&lt;/code> which is explained in &lt;a href="https://stdin.top/posts/network-programming-pt2/">this article&lt;/a>.&lt;/p>
&lt;p>this essentially initiates a connection with the server, involving address resolution, socket creation, and &lt;code>connect()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">SSL&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ssl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SSL_new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SSL_new() failed.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>next, we create an &lt;code>SSL&lt;/code> pointer for peer(server). this will be used to communicate with the server replacing a &lt;code>socket_fd&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">SSL_set_tlsext_host_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ssl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SSL_set_tlsext_host_name() failed.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above code will ask the server to send details only related to the required website/Hostname. This is a necessary step if multiple sites are hosted under 1(single) IP. The server will then send a certificate pertaining to the hostname provided. it&amp;rsquo;s up to us(client) to validate the details.&lt;/p>
&lt;p>Usually, a self-signed certificate cannot be trusted, every OS comes with a set of trusted CA(certificate authorities) that are to be trusted. the client also must verify that the certificate is valid and not expired or yet-to-be issued.&lt;/p>
&lt;p>(certificate validation is not covered in this article)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">SSL_set_fd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ssl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">socket_fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">SSL_connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ssl&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;SSL_connect() failed.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above step, we connect our TCP socket to &lt;code>SSL&lt;/code> using &lt;code>SSL_set_fd&lt;/code>. from this point onwards (after &lt;code>SSL_connect()&lt;/code>) we can communicate securely.&lt;/p>
&lt;p>&lt;code>ssl_connect()&lt;/code> negotiates the best possible and mutually accepted cipher to decrypt and encrypt.it returns &lt;code>-1&lt;/code> on error.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SSL/TLS using %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SSL_get_cipher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ssl&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Optional) print the cipher being used using &lt;code>SSL_get_cipher()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">char&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2048&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;GET / HTTP/1.1&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;Host: %s:%s&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;Connection: close&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;User-Agent: https_simple&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">SSL_write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ssl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Sent Headers:&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">bytes_received&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SSL_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ssl&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bytes_received&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">Connection closed by peer.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Received (%d bytes): &amp;#39;%.*s&amp;#39;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_received&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_received&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above code&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> declares a buffer. the buffer is filled with requred HTTP headers to make a request. &lt;code>send()&lt;/code> is replaced by &lt;code>SSL_write()&lt;/code> and &lt;code>recv()&lt;/code> is replaced by &lt;code>SSL_read()&lt;/code>.&lt;/p>
&lt;p>the response is then stored into the &lt;code>buffer&lt;/code>. the response is printed onto the screen.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">// shutdown ssl connection and free() ctx.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SSL_shutdown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ssl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">SSL_free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ssl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">SSL_CTX_free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// close socket
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we must clean up pointers n stuff, starting with OpenSSL. shutdown the current SSL connection using &lt;code>SSL_shutdown()&lt;/code>, then free it from memory i.e &lt;code>SSL_free(ssl)&lt;/code>. SSL context that is used to create SSL should be free&amp;rsquo;d (since we are exiting the application, keep it around if you don&amp;rsquo;t). Finally, as always, close the socket using &lt;code>close()&lt;/code>&lt;/p>
&lt;h3 id="output">Output&lt;/h3>
&lt;p>compile the program with GCC (remember to link with openSSL library)&lt;/p>
&lt;p>&lt;code>gcc get_https_webpage.c -lcrypto -lssl&lt;/code>&lt;/p>
&lt;p>Run the program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">~/Documents/Projects/network_programming/tls(master) » ./a.out example.org 443 jojo@synk
args: example.org 443
ip: 93.184.216.34 | protocol: https
connected!
SSL/TLS using TLS_AES_256_GCM_SHA384
Sent Headers:
GET / HTTP/1.1
Host: example.org:443
Connection: close
User-Agent: https_simple
Received (370 bytes): &amp;#39;HTTP/1.1 200 OK
Accept-Ranges: bytes
Age: 361373
Cache-Control: max-age=604800
Content-Type: text/html; charset=UTF-8
Date: Mon, 21 Sep 2020 18:13:25 GMT
Etag: &amp;#34;3147526947&amp;#34;
Expires: Mon, 28 Sep 2020 18:13:25 GMT
Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT
Server: ECS (nyb/1D1B)
Vary: Accept-Encoding
X-Cache: HIT
Content-Length: 1256
Connection: close
&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note, the response is only partial. &lt;code>SSL_read()&lt;/code> must be run in a loop to receive until end.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Code was taken from &lt;a href="https://github.com/codeplea/Hands-On-Network-Programming-with-C/blob/master/chap09/https_get.c">Hands-On Network Programming with C Code Repo&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Sending mail using SMTP protocol</title><link>https://stdin.top/posts/smtp-sendmail/</link><pubDate>Thu, 17 Sep 2020 00:47:17 +0530</pubDate><guid>https://stdin.top/posts/smtp-sendmail/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This article introduces the SMTP protocol and associated code and jargon. Next, we make a quick walkthrough of code to send mail to the smtp server.&lt;/p>
&lt;h2 id="smtp-commands">SMTP commands.&lt;/h2>
&lt;p>&lt;a href="https://users.cs.cf.ac.uk/Dave.Marshall/PERL/node175.html">Read Here&lt;/a>&lt;/p>
&lt;h3 id="flow">Flow&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">(ON CONNECT) (expect 220)
HELO BOOMER (expect 250)
MAIL FROM (expect 250)
RCPT TO (expect 250)
DATA (expect 354)
(ON END OF EMAIL BODY) (expect 250)
QUIT (expect 221)
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="notices note" >&lt;p>the code explained here can be found in my &lt;a href="https://github.com/jkotra/NetworkProgramming/blob/master/smtp/sendmail.c">NetworkProgramming GitHub repository&lt;/a>.&lt;/p>&lt;/div>
&lt;h1 id="sending-mail">Sending mail&lt;/h1>
&lt;p>we start by importing required headers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/socket.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/select.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;netdb.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;ctype.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;time.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;errno.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>SMTP server address and port are &lt;code>#define&lt;/code>ed at start for ease of use later on.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define SMTPSERVER &amp;#34;gmail-smtp-in.l.google.com&amp;#34;
&lt;/span>&lt;span class="cp">#define SMTPPORT &amp;#34;25&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>there are 3 functions in this program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">void parse_code(char *server_response, char *resp);
int wait_for_response(int socket_fd, char *code);
int send_response(int socket_fd, char *request);
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="parsing-code-from-a-string">Parsing code from a string&lt;/h3>
&lt;p>code parsing from the string is handled by &lt;code>parse_code&lt;/code> function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">parse_code&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">server_response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">resp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server_response&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isdigit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server_response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isdigit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server_response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">isdigit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server_response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">resp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">server_response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">resp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">server_response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">resp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">server_response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above function takes two parameters &lt;code>char *server_response, char *resp&lt;/code>. the result if found will be stored in &lt;code>resp&lt;/code>.&lt;/p>
&lt;h1 id="sending-and-receiving">Sending and Receiving&lt;/h1>
&lt;p>Sending and Receiving from the server is handled by two functions - &lt;code>wait_for_response&lt;/code> and &lt;code>send_response&lt;/code> respectively.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">wait_for_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">code&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">code_resp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">recv_bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Server: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">parse_code&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">code_resp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">code_resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">code&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Client: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sent_bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="main">&lt;code>main()&lt;/code>&lt;/h2>
&lt;p>we start the main function by initiating a socket.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_socktype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SOCK_STREAM&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">peer_address&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">getaddrinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SMTPSERVER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SMTPPORT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">peer_address&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;getaddrinfo() failed.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Creating socket...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer_address&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_family&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">peer_address&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_socktype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer_address&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_protocol&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Connecting...&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">peer_address&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer_address&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addrlen&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;connect() failed.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">freeaddrinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer_address&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Connected!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above code takes care of address resolution and other things, for a detailed explanation see my posts with &lt;code>network programming&lt;/code> tag.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">wait_for_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;220&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected response&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>on connection with SMTP server, we expect a welcome message with code &lt;code>220&lt;/code>. The program will exit if the code is mismatched.&lt;/p>
&lt;p>Example response from SMTP server:&lt;/p>
&lt;p>&lt;code>Server: 220 mx.google.com ESMTP s28si3735353pgn.104 - gsmtp&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;HELO BOOMER&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">wait_for_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;250&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected response&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, we need to identify ourself to the server, this can be done by a messagein the format of &lt;code>HELO [YOURNAME]&lt;/code>&lt;/p>
&lt;p>The SMTP server will greet us with code &lt;code>250&lt;/code> followed by a vendor-specific human greeting.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;MAIL FROM:&amp;lt;hekko@xyz.com&amp;gt;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">wait_for_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;250&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected response&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;RCPT TO:&amp;lt;testing@gmail.com&amp;gt;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">wait_for_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;250&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected response&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We then send the details about our ourself and the recipient. we expect a &lt;code>250&lt;/code> response from the server.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;DATA&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">wait_for_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;354&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected response&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We tell the server that we are going to send email data from the next message onwards by sending it a single word &lt;code>DATA\r\n&lt;/code>. we expect the &lt;code>354&lt;/code> code in response, this indicates the server is ready to receive data.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;From:&amp;lt;hekko@xyz.com&amp;gt;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;To:&amp;lt;hello@gmail.com&amp;gt;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Subject:SMTP TEST&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>the above code will the required details in the body to the server, note that all of these can be sent in one message (headers and body) subject to server acceptance.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">time_t&lt;/span> &lt;span class="n">timer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">timer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">tm&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">timeinfo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">timeinfo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gmtime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">timer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">date&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">strftime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">date&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%a, %d %b %Y %H:%M:%S +0000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timeinfo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">date&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Date:%s&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">date&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">date&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>our message must include a timestamp. we generate a timestamp to include in our email using &lt;code>strftime()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="kt">char&lt;/span> &lt;span class="n">helloworld_body&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello World.&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">.&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">send_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">helloworld_body&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">wait_for_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;250&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected response&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This the body of our mail, write your heart&amp;rsquo;s content here 😄 a simple &lt;code>.&lt;/code> separated by &lt;code>\r\n&lt;/code> will indicate that message is over.the server should return &lt;code>250&lt;/code> code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">wait_for_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;221&amp;#34;&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unexpected response&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we send &lt;code>QUIT\r\n&lt;/code> to the SMTP server. this formally completes our communication with the server. we then close the socket (&lt;code>server&lt;/code>)&lt;/p>
&lt;p>Congratulation, If everything works correctly, you should be able to send email using just C code.&lt;/p>
&lt;div class="notices warning" >&lt;p>Most residential IP&amp;rsquo;s are blocked to send an email. GMAIL does not allow it&amp;rsquo;s SMTP servers to be used by individuals, the email we try to send is rejected by google for obvious reasons. See output below.&lt;/p>&lt;/div>
&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">Creating socket...
Connecting...
Connected!
Server: &lt;span class="m">220&lt;/span> mx.google.com ESMTP s28si3735353pgn.104 - gsmtp
Client: HELO BOOMER
Server: &lt;span class="m">250&lt;/span> mx.google.com at your service
Client: MAIL FROM:&amp;lt;hekko@xyz.com&amp;gt;
Server: &lt;span class="m">250&lt;/span> 2.1.0 OK s28si3735353pgn.104 - gsmtp
�-�
Client: RCPT TO:&amp;lt;00.xog.00@gmail.com&amp;gt;
Server: &lt;span class="m">250&lt;/span> 2.1.5 OK s28si3735353pgn.104 - gsmtp
�-�
Client: DATA
Server: &lt;span class="m">354&lt;/span> Go ahead s28si3735353pgn.104 - gsmtp
-�
Client: From:&amp;lt;hekko@xyz.com&amp;gt;
Client: To:&amp;lt;hello@gmail.com&amp;gt;
Client: Subject:SMTP TEST
Client: Date:Date:17 Sep &lt;span class="m">2020&lt;/span> 09:31:23 +0000
Client:
Client: Hello World.
.
Server: 421-4.7.0 &lt;span class="o">[&lt;/span>223.230.89.223 15&lt;span class="o">]&lt;/span> Our system has detected that this message is
421-4.7.0 suspicious due to the very low reputation of the sending IP address.
421-4.7.0 To protect our users from spam, mail sent from your IP address has
421-4.7.0 been temporarily rate limited. Please visit
&lt;span class="m">421&lt;/span> 4.7.0 https://support.google.com/mail/answer/188131 &lt;span class="k">for&lt;/span> more information. s28si3735353pgn.104 - gsmtp
unexpected response
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>This is a very basic example of SMTP protocol which is a de facto way to send emails to each other.&lt;/p>
&lt;p>I hope you learned something in this article. A working production SMTP client would generally look like this albeit with extra nuts and bolts to handle additional security and authorization.&lt;/p></description></item><item><title>DNS resolution in C</title><link>https://stdin.top/posts/dns-resolve/</link><pubDate>Tue, 08 Sep 2020 01:20:42 +0530</pubDate><guid>https://stdin.top/posts/dns-resolve/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>DNS resolution is the process of converting Domain name (example.com) into an IP address, Reverse DNS is the opposite of it, IP -&amp;gt; Domain&lt;/p>
&lt;p>this article is a code walkthrough of a simple C program to resolve domain names into their respective IP address(s).&lt;/p>
&lt;h1 id="code">Code&lt;/h1>
&lt;div class="notices note" >&lt;p>the code explained here can be found in my &lt;a href="https://github.com/jkotra/NetworkProgramming/blob/master/dns/lookup.c">NetworkProgramming GitHub repository&lt;/a>.&lt;/p>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;netdb.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[]){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;resolving host: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_flags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AI_ALL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">getaddrinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;getaddrinfo error!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">do&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">addr_buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">getnameinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addrlen&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr_buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">addr_buf&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NI_NUMERICHOST&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr_buf&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_next&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="explanation">explanation&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>we start by first printing arguments to screen, the program expects two arguments, a domain name and a port/protocol.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>a struct of &lt;code>addrinfo&lt;/code> is declared &lt;code>hints&lt;/code>. this struct fields need to be set as per our requirement. in the next line, we set &lt;code>hints.ai_flags = AI_ALL;&lt;/code>. this means that we want bot IPV4 and IPV6 addresses. the result will be in the form of a linked list that can be iterated.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>we then declare another &lt;code>addrinfo&lt;/code> struct called &lt;code>peer&lt;/code>. this holds the results of &lt;code>getnameinfo()&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="getnameinfo">&lt;code>getnameinfo()&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="kt">int&lt;/span> &lt;span class="nf">getnameinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">sockaddr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">socklen_t&lt;/span> &lt;span class="n">addrlen&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">socklen_t&lt;/span> &lt;span class="n">hostlen&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">serv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">socklen_t&lt;/span> &lt;span class="n">servlen&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;ol start="4">
&lt;li>the address(s) will be stored in a linked, there can be iterated using &lt;code>do while&lt;/code> loop as shown above in code.&lt;/li>
&lt;/ol>
&lt;h1 id="output">Output&lt;/h1>
&lt;p>compile the program using &lt;code>gcc&lt;/code>&lt;/p>
&lt;p>&lt;code>gcc lookup.c -o lookup&lt;/code>&lt;/p>
&lt;p>run the program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">~/Documents/Projects/network_programming/dns(master*) » ./lookup example.com http jojo@synk
resolving host: example.com
93.184.216.34
93.184.216.34
93.184.216.34
2606:2800:220:1:248:1893:25c8:1946
2606:2800:220:1:248:1893:25c8:1946
2606:2800:220:1:248:1893:25c8:1946
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="notices tip" >&lt;p>&lt;p>the above output contains multiple duplicates, this can be fixed by adding another field to &lt;code>hints&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_socktype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SOCK_STREAM&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/p>&lt;/div>
&lt;hr>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;ul>
&lt;li>resolving domain names to IP address.&lt;/li>
&lt;li>usage of &lt;code>getnameinfo()&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Communicating between server and client using UDP</title><link>https://stdin.top/posts/udp-server-client/</link><pubDate>Sun, 06 Sep 2020 00:34:58 +0530</pubDate><guid>https://stdin.top/posts/udp-server-client/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This article provides a brief introduction to the UDP protocol, what makes it different from TCP. we further delve into how to set up a server and a client to communicate with each other using UDP protocol.&lt;/p>
&lt;h2 id="gentle-introduction-to-udp">Gentle introduction to UDP&lt;/h2>
&lt;blockquote>
&lt;p>UDP (User Datagram Protocol) is a communications protocol that is primarily used for establishing low-latency and loss-tolerating connections between applications on the internet. It speeds up transmissions by enabling the transfer of data before an agreement is provided by the receiving party. As a result, UDP is beneficial in time-sensitive communications, including voice over Internet Protocol (VoIP), domain name system (DNS) lookup, and video or audio playback. UDP is an alternative to Transmission Control Protocol (TCP).&lt;/p>
&lt;/blockquote>
&lt;p>Source: &lt;a href="https://searchnetworking.techtarget.com/definition/UDP-User-Datagram-Protocol">techtarget.com&lt;/a>&lt;/p>
&lt;br>
&lt;p>&lt;u>Salient features of UDP&lt;/u>:&lt;/p>
&lt;ul>
&lt;li>UDP is a called &amp;ldquo;connection-less&amp;rdquo; protocol. no prior handshake is required to send data.&lt;/li>
&lt;li>UDP has an infamous tagline &amp;ldquo;Fire and Forget&amp;rdquo;, unlike in TCP, UDP does not bother to check if the packets reached the destination or not.&lt;/li>
&lt;li>UDP is the primary protocol for DNS resolution, most DNS servers support TCP as a fallback.&lt;/li>
&lt;li>UDP is fast compared to TCP, because of the low overhead.&lt;/li>
&lt;/ul>
&lt;h1 id="udp-server">UDP Server&lt;/h1>
&lt;div class="notices note" >&lt;p>the code explained here can be found in my &lt;a href="https://github.com/jkotra/NetworkProgramming/blob/master/udp/udp_server_select.c">NetworkProgramming GitHub repository&lt;/a>.&lt;/p>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">bind_addr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_family&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AF_INET&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//ipv4
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_socktype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SOCK_DGRAM&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// UDP
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_flags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AI_PASSIVE&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">getaddrinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;8080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">bind_addr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>we start by declaring &lt;code>addrinfo&lt;/code> struct. we set the contents of &lt;code>hints&lt;/code> to &lt;code>0&lt;/code> using &lt;code>memset()&lt;/code>&lt;/li>
&lt;li>we need to set required fields in &lt;code>hints&lt;/code>,&lt;/li>
&lt;/ol>
&lt;p>Notice the &lt;code>hints.ai_socktype&lt;/code> is set to &lt;code>SOCK_DGRAM&lt;/code>. this indicates that we want a UDP address. use &lt;code>SOCK_STREAM&lt;/code> for TCP.&lt;/p>
&lt;ol start="3">
&lt;li>we then call &lt;code>getaddrinfo()&lt;/code> with the required parameters. the result will be stored in &lt;code>bind_addr&lt;/code> struct.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">//bind it
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">socket_fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bind_addr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_family&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bind_addr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_socktype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bind_addr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_protocol&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;socket_fd: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">socket_fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bind_addr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bind_addr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addrlen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;UDP server listing on 127.0.0.1:8080&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>create a socket. it returns a negative number on failure.&lt;/li>
&lt;li>we can then bind the address to the port, we do it by calling &lt;code>bind()&lt;/code> with socket descriptor, address, and address length.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">struct&lt;/span> &lt;span class="n">sockaddr_storage&lt;/span> &lt;span class="n">client_address&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">socklen_t&lt;/span> &lt;span class="n">client_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">client_address&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">bytes_received&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">recvfrom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">sockaddr&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">client_address&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">client_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>declare &lt;code>sockaddr_storage&lt;/code> struct. this is used to store the address of the client.&lt;/li>
&lt;li>declare &lt;code>client_len&lt;/code> of type &lt;code>socklen_t&lt;/code>. this stores the length of the client address.&lt;/li>
&lt;li>declare a char array of length &lt;code>1024&lt;/code>.&lt;/li>
&lt;li>we then call &lt;code>recvfrom()&lt;/code>. this is where UDP defers from TCP in a major way. in UDP we do not need to call &lt;code>accept()&lt;/code> or any other handshake procedure, the data can be directly sent to the client.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="n">bytes_received&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">recvfrom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">sockaddr&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">client_address&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">client_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>socket_fd&lt;/code> - socket descriptor.&lt;/p>
&lt;p>&lt;code>read&lt;/code> - message buffer. the response will be stored here.&lt;/p>
&lt;p>&lt;code>1024&lt;/code> - length of &lt;code>read&lt;/code>.&lt;/p>
&lt;p>&lt;code>0&lt;/code> - Flags.&lt;/p>
&lt;p>&lt;code>(struct sockaddr*)&amp;amp;client_address&lt;/code> - client address will be stored in this on connection.&lt;/p>
&lt;p>&lt;code>&amp;amp;client_len&lt;/code> - length of client address.&lt;/p>
&lt;br>
&lt;p>we finally close the socket after reading from the client using &lt;code>close()&lt;/code>&lt;/p>
&lt;hr>
&lt;h1 id="udp-client">UDP Client&lt;/h1>
&lt;div class="notices note" >&lt;p>the code explained here can be found in my &lt;a href="https://github.com/jkotra/NetworkProgramming/blob/master/udp/udp_client.c">NetworkProgramming GitHub repository&lt;/a>.&lt;/p>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invalid no of args.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_socktype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SOCK_DGRAM&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;args: %s %s %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">getaddrinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;addrinfo() error!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>as always, we start by declaring &lt;code>hints&lt;/code> and set required fields, in this case, we only need to set the required socket type i.e UDP &lt;code>hints.ai_socktype = SOCK_DGRAM;&lt;/code>&lt;/li>
&lt;li>we call &lt;code>getaddrinfo()&lt;/code> with user arguments, example (&lt;em>argv[1]&lt;/em> = &lt;code>example.com&lt;/code> and &lt;em>argv[2]&lt;/em> = &lt;code>80&lt;/code> or &lt;code>http&lt;/code>). result is stored in &lt;code>peer&lt;/code> struct.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">//create socket
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">socket_fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_family&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_socktype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_protocol&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">strncpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">bytes_sent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sendto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addrlen&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Sent %s (%d bytes)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_sent&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>create a socket.&lt;/li>
&lt;li>declare a char array of length &lt;code>1024&lt;/code> &lt;code>msg&lt;/code>.&lt;/li>
&lt;li>copy user input into &lt;code>msg&lt;/code>.&lt;/li>
&lt;li>use &lt;code>sendto()&lt;/code> to send data to the server. this works similar to &lt;code>recvfrom()&lt;/code> and is the opposite of it.&lt;/li>
&lt;li>finally close the socket using &lt;code>close()&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&amp;ndash;&lt;/p>
&lt;h2 id="lets-chat">Let&amp;rsquo;s chat!&lt;/h2>
&lt;p>compile both server and client using &lt;code>GCC&lt;/code>&lt;/p>
&lt;p>&lt;code>gcc udp_server_select.c -o server&lt;/code>&lt;/p>
&lt;p>&lt;code>gcc udp_client.c -o client&lt;/code>&lt;/p>
&lt;ol>
&lt;li>First, run the &lt;code>server&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">~/Documents/Projects/network_programming/udp&lt;span class="o">(&lt;/span>master*&lt;span class="o">)&lt;/span> » ./server jojo@synk
socket_fd: &lt;span class="m">3&lt;/span>
UDP server listing on 127.0.0.1:8080
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>once the server is up and running, we can test it out by sending messages from our &lt;code>client&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">./client 127.0.0.1 &lt;span class="m">8080&lt;/span> hello
&lt;/code>&lt;/pre>&lt;/div>&lt;p>you should see &lt;code>hello&lt;/code> printed to in server window.&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="https://stdin.top/images/DSN1YQa.gif" alt="">
&lt;figcaption>UDP Demo&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>this article demonstrates/code walkthrough on how to set up a server and client and communicate using UDP protocol.&lt;/p></description></item><item><title>Network Programming Pt 2 - TCP client</title><link>https://stdin.top/posts/network-programming-pt2/</link><pubDate>Mon, 31 Aug 2020 01:49:14 +0530</pubDate><guid>https://stdin.top/posts/network-programming-pt2/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>HTTP is powered by TCP, websites can be retrieved by communicating through TCP socket. this a code walkthrough of c program to retrieve &lt;code>example.com&lt;/code>&lt;/p>
&lt;h1 id="tcp-client">TCP client&lt;/h1>
&lt;div class="notices note" >&lt;p>the code explained here can be found in my &lt;a href="https://github.com/jkotra/NetworkProgramming/blob/master/tcp_client_classic.c">NetworkProgramming GitHub repository&lt;/a>.&lt;/p>&lt;/div>
&lt;p>
&lt;figure>
&lt;img src="https://stdin.top/images/tcp_client.png" alt="Flowchart">
&lt;figcaption>TCP client flowchart&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_socktype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SOCK_STREAM&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;args: %s %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">getaddrinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;addrinfo() error!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>we start by declaring a &lt;code>addrinfo&lt;/code> struct &lt;code>hints&lt;/code>. we then call &lt;code>getaddrinfo()&lt;/code>. &lt;code>getaddrinfo()&lt;/code> resolves domain name into IP address.&lt;/li>
&lt;li>note that unlike in server, we only need to set &lt;code>hints.ai_socktype = SOCK_STREAM;&lt;/code> other fields are filled automatically by &lt;code>getaddrinfo()&lt;/code> based on IP we are connecting to.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="kt">char&lt;/span> &lt;span class="n">peer_addr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">peer_protocol&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">getnameinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addrlen&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer_addr&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">peer_protocol&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer_protocol&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">NI_NUMERICHOST&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ip: %s | protocol: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer_protocol&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="0">
&lt;li>we can print the domain and protocol using the code above (Optional)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="c1">//family socket_type protocol
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">socket_fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_family&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_socktype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_protocol&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;socket error.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">peer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addrlen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;connect error.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;connected!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>we start by creating a socket using &lt;code>peer&lt;/code> fields are arguments.&lt;/li>
&lt;li>we then need to call &lt;code>connect()&lt;/code> to connect to a remote address.&lt;code>connect()&lt;/code> returns a negative number on error.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;GET /index.html HTTP/1.1&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">Host: www.example.com&lt;/span>&lt;span class="se">\r\n\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4096&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">bytes_received&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4096&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;bytes_received: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_received&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socket_fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>declare a string &lt;strong>header&lt;/strong>, this needs to be sent to the server to get a response.&lt;/li>
&lt;li>we can then call &lt;code>recv()&lt;/code>, this stores response from the web server into &lt;code>res&lt;/code>&lt;/li>
&lt;li>the response is printed to &lt;code>stdout&lt;/code> using &lt;code>printf()&lt;/code>&lt;/li>
&lt;/ol>
&lt;h1 id="lets-test-it-out">Let&amp;rsquo;s test it out!&lt;/h1>
&lt;p>compile the program using &lt;code>gcc&lt;/code>&lt;/p>
&lt;p>&lt;code>gcc tcp_client_classic.c -o tcp_client&lt;/code>&lt;/p>
&lt;p>run the program with required args: &lt;code>domain&lt;/code> and &lt;code>protocol&lt;/code>&lt;/p>
&lt;p>&lt;code>./tcp_client example.com http&lt;/code>&lt;/p>
&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">
args: example.com http
ip: 93.184.216.34 | protocol: http
connected!
bytes_received: 1607
HTTP/1.1 200 OK
Accept-Ranges: bytes
Age: 505529
Cache-Control: max-age=604800
Content-Type: text/html; charset=UTF-8
Date: Wed, 02 Sep 2020 08:30:19 GMT
Etag: &amp;#34;3147526947&amp;#34;
Expires: Wed, 09 Sep 2020 08:30:19 GMT
Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT
Server: ECS (nyb/1D10)
Vary: Accept-Encoding
X-Cache: HIT
Content-Length: 1256
&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example Domain&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">http-equiv&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Content-type&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text/html; charset=utf-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text/css&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#f0f0f2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">font-family&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">apple-system&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">system-ui&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BlinkMacSystemFont&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Segoe UI&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Open Sans&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Helvetica Neue&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Helvetica&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Arial&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">sans-serif&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">600&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">em&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#fdfdff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">border-radius&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">box-shadow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="nb">rgba&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.02&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nt">a&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">link&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">a&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">visited&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#38488f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">text-decoration&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">media&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nt">max-width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">700px&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example Domain&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This domain is for use in illustrative examples in documents. You may use this
domain in literature without prior coordination or asking for permission.&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://www.iana.org/domains/example&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>More information...&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>This article covered a code walkthrough on how to retrieve a web page using sockets.&lt;/p></description></item><item><title>Network programming Pt. 1 - TCP and Hello World!</title><link>https://stdin.top/posts/network-programming-pt1/</link><pubDate>Thu, 27 Aug 2020 16:40:15 +0530</pubDate><guid>https://stdin.top/posts/network-programming-pt1/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>a short introduction to &lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP&lt;/a> and code walkthrough of a simple TCP web server.&lt;/p>
&lt;h2 id="tcp-protocol">TCP protocol&lt;/h2>
&lt;p>The Transmission Control Protocol (TCP) is one of the main protocols of the Internet protocol suite. It originated in the initial network implementation in which it complemented the Internet Protocol (IP). Therefore, the entire suite is commonly referred to as TCP/IP. TCP provides reliable, ordered, and error-checked delivery of a stream of octets (bytes) between applications running on hosts communicating via an IP network. Major internet applications such as the World Wide Web, email, remote administration, and file transfer rely on TCP, which is part of the Transport Layer of the TCP/IP suite. SSL/TLS often runs on top of TCP.&lt;/p>
&lt;p>Source: &lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">Wikipedia&lt;/a>&lt;/p>
&lt;div class="notices note" >&lt;p>TCP is a streaming protocol whereas UDP is a connectionless protocol.&lt;/p>&lt;/div>
&lt;h2 id="code">Code&lt;/h2>
&lt;div class="notices note" >&lt;p>the code explained here can be found in my &lt;a href="https://github.com/jkotra/NetworkProgramming/blob/master/hello.c">NetworkProgramming GitHub repository&lt;/a>.&lt;/p>&lt;/div>
&lt;h1 id="walkthrough">Walkthrough&lt;/h1>
&lt;p>we need a bunch of header files that contain different functions and structures that we need.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/socket.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;netinet/in.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;netdb.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define MAX_BACKLOG 10
&lt;/span>&lt;span class="cp">#define PORT &amp;#34;8080&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="header-breakdown">Header Breakdown&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Header&lt;/th>
&lt;th>what for?&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://pubs.opengroup.org/onlinepubs/007904975/basedefs/sys/types.h.html">sys/types.h&lt;/a>&lt;/td>
&lt;td>system types. used in cpmbination with &lt;code>sys/socket.h&lt;/code> for compatibily on all unix-like systems.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://pubs.opengroup.org/onlinepubs/007908799/xns/syssocket.h.html">sys/socket.h&lt;/a>&lt;/td>
&lt;td>&lt;code>socket(), bind(), connect(), accept(), send()&lt;/code> etc..&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://pubs.opengroup.org/onlinepubs/000095399/basedefs/netinet/in.h.html">netinet/in.h&lt;/a>&lt;/td>
&lt;td>Internet address family - structures for &lt;code>IPV4&lt;/code> &lt;code>IPV6&lt;/code> etc.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://pubs.opengroup.org/onlinepubs/007908799/xns/netdb.h.html">netdb.h&lt;/a>&lt;/td>
&lt;td>&lt;code>getaddrinfo()&lt;/code> &lt;code>getnameinfo()&lt;/code> etc..&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>
&lt;figure>
&lt;img src="https://stdin.top/images/tcp_server.png" alt="TCP server">
&lt;figcaption>TCP server flowchart&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>we start by calling &lt;code>init_server()&lt;/code> function. this function will create a socket and bind it to a port.&lt;/p>
&lt;p>&lt;code>init_server&lt;/code> return&amp;rsquo;s a socket descriptor (&lt;code>&amp;gt; 0&lt;/code>) if the socket is created and the address is successfully binded.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="kt">int&lt;/span> &lt;span class="n">socketfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">init_server&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">socketfd&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;cannot init_server()&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>this is our &lt;code>init_server()&lt;/code> function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">init_server&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">bind_addr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//zero out!
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_family&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AF_INET&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// we need ipv4
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_socktype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SOCK_STREAM&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// TCP
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">hints&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ai_flags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AI_PASSIVE&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// PASSIVE mode
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">getaddrinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PORT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">bind_addr&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//get local address from system.
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//init socket
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">socketfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bind_addr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_family&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bind_addr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_socktype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bind_addr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_protocol&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socketfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bind_addr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bind_addr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ai_addrlen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">socketfd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>we first start by declaring two structs of &lt;code>addrinfo&lt;/code> - &lt;code>hints&lt;/code> and &lt;code>bind_addr&lt;/code>&lt;/li>
&lt;li>we must zero out the struct struct &lt;code>memset()&lt;/code>. this will remove any garbage data from it and set all friends to &lt;code>0&lt;/code>.&lt;/li>
&lt;li>set fields in &lt;code>hints&lt;/code> struct. (refer to inline comments).&lt;/li>
&lt;/ol>
&lt;div class="notices tip" >&lt;p>we only need to set &lt;code>hints.ai_socktype&lt;/code> in a &lt;strong>TCP client&lt;/strong> scenario. more on that in later parts.&lt;/p>&lt;/div>
&lt;ol start="4">
&lt;li>we then call &lt;code>getaddrinfo()&lt;/code>. it&amp;rsquo;s defined as:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">getaddrinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">service&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">hints&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">addrinfo&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>set &lt;code>NULL&lt;/code> as the first argument(&lt;em>node&lt;/em>) indicating we need an address from system, 2nd arg. is our desired port, 3rd arg is &lt;code>hints&lt;/code> struct passed as a ref, the result of this is stored in &lt;code>bind_addr&lt;/code> struct that we defined above and passed as a ref as 4th arg.&lt;/p>
&lt;ol start="5">
&lt;li>
&lt;p>we start a socket by passing the required parameters from &lt;code>bind_addr&lt;/code> struct. it will return a negative number on failure. a positive number is returned on successful creation of socket, this number indicates the file descriptor associated with the socket.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>we call &lt;code>bind()&lt;/code>. this will bind the IP to port. &lt;code>bind()&lt;/code> returns a negative number on failure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>finally we return the &lt;code>socket_fd&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Back to &lt;code>main()&lt;/code>
we then call &lt;code>listen()&lt;/code> with two arguments, 1st arg is &lt;code>socket_fd&lt;/code> and second one is &lt;code>MAX_BACKLOG&lt;/code> - this is the maximum number of simultanious connection that our socket will accept before refusing.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//start listining
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socketfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAX_BACKLOG&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;✅ server listining on 127.0.0.1:%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PORT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;❌ cannot listen()! %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socketfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAX_BACKLOG&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>we then call to &lt;code>accept_and_send()&lt;/code> function with &lt;code>socket_fd&lt;/code> as arg. this function will accept incoming connections (forwarded by &lt;code>listen()&lt;/code>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">accept_and_send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socketfd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>accept_and_send()&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">accept_and_send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">socketfd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">sockaddr_storage&lt;/span> &lt;span class="n">client_addr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//to store client addr
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">socklen_t&lt;/span> &lt;span class="n">client_addr_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//length of client addr;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">socketfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">sockaddr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">client_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">client_addr_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">client&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;cannot accept connection from client!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">addr_buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">//empty buf. to store ip.
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">getnameinfo&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">sockaddr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">client_addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">client_addr_len&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr_buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">addr_buffer&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">NI_NUMERICHOST&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;client IP: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">addr_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// HANDLE / READ REQ
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">bytes_received&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">recv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">client&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//send response
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;HTTP/1.1 200 OK&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;Connection: close&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;Content-Type: text/plain&lt;/span>&lt;span class="se">\r\n\r\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;Hello World from hello.c&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">bytes_sent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">client&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">client&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>we start the function by declaring two structs - &lt;code>client_addr&lt;/code> and &lt;code>client_addr_len&lt;/code>
&lt;code>sockaddr_storage&lt;/code> stores the client address. &lt;code>client_addr_len&lt;/code> stores lenth of client address.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>we call &lt;code>accept()&lt;/code>. this will accept the client connection and store the details in above-declared structs.it returns &lt;code>-1&lt;/code> on failure. this returns a file descriptor for the accepted socket that we can use to send and receive data from the client.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>optionally, we can get ip address of client using &lt;code>getnameinfo()&lt;/code>. &lt;code>getnameinfo()&lt;/code> is essentially inverse of &lt;code>getaddrinfo()&lt;/code>.&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>TCP connection is initiated by receiving data from the client. this acts as a handshake between client and server.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>we can then send data to the client, we use &lt;code>send()&lt;/code>. to send data to the client.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>close the connection by closing the client file descriptor.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="notices tip" >&lt;p>&lt;p>it&amp;rsquo;s always a good practice to close socket at end of program.&lt;/p>
&lt;p>&lt;code>close(socket_fd)&lt;/code>&lt;/p>
&lt;/p>&lt;/div>
&lt;h1 id="lets-test-it-out">Let&amp;rsquo;s test it out!&lt;/h1>
&lt;p>compile the program using &lt;code>gcc&lt;/code>&lt;/p>
&lt;p>&lt;code>gcc hello.c -o hello&lt;/code>&lt;/p>
&lt;p>Run the program&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">~/Documents/Projects/network_programming » ./hello
socketfd = 3
✅ server listining on 127.0.0.1:8080
&lt;/code>&lt;/pre>&lt;/div>&lt;p>open a browser and navigate to &lt;code>http://127.0.0.1:8080/&lt;/code>&lt;/p>
&lt;p>you should see a nice message from our webserver:&lt;/p>
&lt;p>&lt;code>Hello World from hello.c&lt;/code>&lt;/p>
&lt;hr>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>My humble attempt to re-explain network programming concepts and code in C as I learn them myself, I hope this series helps in your learning and also serves as a note-keeping for me 😊&lt;/p></description></item><item><title>Xcard library</title><link>https://stdin.top/posts/xcard/</link><pubDate>Thu, 20 Aug 2020 22:36:03 +0530</pubDate><guid>https://stdin.top/posts/xcard/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;a href="https://github.com/jkotra/xcard">xcard&lt;/a> is a library to generate and validate credit/debit cards. it&amp;rsquo;s divided into two classes:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jkotra/xcard/blob/master/src/xcard.cpp">&lt;code>xcard&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/jkotra/xcard/blob/master/src/xcard_mt.cpp">&lt;code>xcardMT&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/jkotra/xcard/blob/master/src/xcard_mt.cpp">&lt;code>xcardMT&lt;/code>&lt;/a> class consists of multithreaded functions which are useful when processing millions of cards.&lt;/p>
&lt;h2 id="luhn-checksum">Luhn checksum&lt;/h2>
&lt;blockquote>
&lt;p>The Luhn algorithm or Luhn formula, also known as the &amp;ldquo;modulus 10&amp;rdquo; or &amp;ldquo;mod 10&amp;rdquo; algorithm, named after its creator, IBM scientist Hans Peter Luhn, is a simple checksum formula used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, National Provider Identifier numbers in the United States, Canadian Social Insurance Numbers, Israeli ID Numbers, South African ID Numbers, Greek Social Security Numbers (ΑΜΚΑ), and survey codes appearing on McDonald&amp;rsquo;s, Taco Bell, and Tractor Supply Co. receipts.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Luhn_algorithm">From Wikipedia: Luhn algorithm&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="using-xcard-library">using &lt;code>xcard&lt;/code> library&lt;/h2>
&lt;p>&lt;a href="https://github.com/jkotra/xcard/blob/master/src/demo.cpp">demo.cpp&lt;/a> contains simple code to generate a random credit card with prefix &lt;code>4&lt;/code>(VISA)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;threads.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;../include/xcard.hpp&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">//initialize
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">xcard&lt;/span> &lt;span class="n">xc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;xcard version: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">xc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">VERSION&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Generate 10 random valid cards with prefix 4&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">xc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">generateCard&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="multithreaded-functions-for-validation-and-search">Multithreaded functions for validation and search&lt;/h3>
&lt;p>&lt;code>xcardMT&lt;/code> consists of a &lt;code>constructor&lt;/code> which takes 3 arguments (prefix, no of threads and debug switch) and two multi-threaded functions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">xcardMT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">prefix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">debug&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">validateFromFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ifstream&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">LinearSearch&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>&lt;code>xcard&lt;/code> is a very simple C++ library to validate and generate credit cards, multi-threaded functions are useful to speed up processing on supported CPU(s).&lt;/p></description></item><item><title>They are Billions - Automatic game saving utility</title><link>https://stdin.top/posts/trbsg/</link><pubDate>Sun, 09 Aug 2020 15:52:50 +0530</pubDate><guid>https://stdin.top/posts/trbsg/</guid><description>&lt;p>&lt;a href="https://github.com/jkotra/trbsg">Github repository&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>technical overview of &lt;a href="https://github.com/jkotra/trbsg">TRBSG&lt;/a>. the purpose of the tool is to automatically backup(zip) save files of &lt;a href="https://en.wikipedia.org/wiki/They_Are_Billions">They are Billions&lt;/a> and easily restore them afterward.&lt;/p>
&lt;h2 id="usecase">Usecase&lt;/h2>
&lt;ul>
&lt;li>start from anytime the game is saved.&lt;/li>
&lt;li>easy to restore (&lt;code>-r&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h2 id="how">How&lt;/h2>
&lt;div class="notices note" >&lt;p>save directory is by default set to &lt;code>C:\\Users\{user}\Documents\My Games\They Are Billions\&lt;/code>.
non-default value can be passed using &lt;code>--path&lt;/code> arg.&lt;/p>&lt;/div>
&lt;p>This is a small script(&lt;em>&amp;lt; 80 ln&lt;/em>) written in python (&amp;gt;= &lt;em>3.0&lt;/em>). this script repeatedly checks for a change in modified date of files ending with &lt;code>*zx*&lt;/code> file extension as an indication that savefiles are modified.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">watch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Watching: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">modified_times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">files&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">walk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">files&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="s2">&amp;#34;.zx&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">modified_times&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getmtime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">current_modified_times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">files&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">walk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">files&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="s2">&amp;#34;.zx&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">current_modified_times&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getmtime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="k">except&lt;/span> &lt;span class="ne">FileNotFoundError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">current_modified_times&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">modified_times&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modified_times&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">current_modified_times&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">modified_times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_modified_times&lt;/span>
&lt;span class="n">zipSave&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>1st loop stores the initial &lt;code>modified time&lt;/code> of files in a list. this is later compared every time in an infinite loop to check for a change in the modified timestamp. if any change is detected, it calls &lt;code>zipSave(path)&lt;/code> and sets &lt;code>modified_times = current_modified_times&lt;/code>&lt;/p>
&lt;p>&lt;code>zipSave()&lt;/code> uses &lt;code>shutil.make_archive()&lt;/code> to make zip file and store it under &lt;code>saves/&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">zipSave&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">zipfname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;saves&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="si">{n}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;saves&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">shutil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">make_archive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">zipfname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;zip&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Backup completed &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zipfname&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>the user has 2 option to restore the backup(s),&lt;/p>
&lt;ol>
&lt;li>extract zip file directly to save directory, relacing files.
(or)&lt;/li>
&lt;li>use &lt;code>-r&lt;/code> option&lt;/li>
&lt;/ol>
&lt;h2 id="demo">Demo&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube-nocookie.com/embed/LzF1HebMW1Y" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>this is a very simple script to backup your progress in the game and restart conveniently. this makes playing &amp;lsquo;They are Billions&amp;rsquo; a bit easier. 😊&lt;/p></description></item><item><title>C11 Threads</title><link>https://stdin.top/posts/c11-threads/</link><pubDate>Mon, 03 Aug 2020 11:23:52 +0530</pubDate><guid>https://stdin.top/posts/c11-threads/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>this is a simple introduction to threading in C. I will be using inbuild &lt;a href="https://en.cppreference.com/w/c/thread">C threading library&lt;/a> &lt;code>threads.h&lt;/code> which is a feature of &lt;a href="https://en.wikipedia.org/wiki/C11_(C_standard_revision)">C11 standard&lt;/a>.&lt;/p>
&lt;p>the advantages of using C11 threads over platform-specific solutions like &lt;a href="https://en.wikipedia.org/wiki/POSIX_Threads">&lt;code>pthread&lt;/code>&lt;/a> is obvious, code portability. write it once, compile it anywhere with the compiler that supports C11 std.&lt;/p>
&lt;h2 id="counting-to-a-billion">Counting to a Billion&lt;/h2>
&lt;h3 id="single-threaded">Single-threaded&lt;/h3>
&lt;p>For the demonstration, we take a simple program the counts to 1 billion (&lt;em>1 billion x 5 times&lt;/em>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">count_to_billion&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1000000000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">at&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;counted to 1 billion! at=%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">at&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="c1">// count to 5 billion 5 times
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">count_to_billion&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">count_to_billion&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">count_to_billion&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">count_to_billion&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">count_to_billion&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>let&amp;rsquo;s compile the program&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">gcc main.c
&lt;/code>&lt;/pre>&lt;/div>&lt;p>we use a Unix utility &lt;code>time&lt;/code> to measure the execution time of the program.&lt;/p>
&lt;p>run the compiled program with &lt;code>time&lt;/code> as the prefix&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">time ./a.out
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">
~/Documents/Projects/CWS » &lt;span class="nb">time&lt;/span> ./a.out
counted to &lt;span class="m">1&lt;/span> billion! &lt;span class="nv">at&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1000000000&lt;/span>
counted to &lt;span class="m">1&lt;/span> billion! &lt;span class="nv">at&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1000000000&lt;/span>
counted to &lt;span class="m">1&lt;/span> billion! &lt;span class="nv">at&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1000000000&lt;/span>
counted to &lt;span class="m">1&lt;/span> billion! &lt;span class="nv">at&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1000000000&lt;/span>
counted to &lt;span class="m">1&lt;/span> billion! &lt;span class="nv">at&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1000000000&lt;/span>
./a.out 8.68s user 0.00s system 99% cpu 8.686 total
&lt;/code>&lt;/pre>&lt;/div>&lt;p>as we can see from the output it took &lt;code>8.686&lt;/code> secs to complete&lt;/p>
&lt;hr>
&lt;h3 id="multithreading">MultiThreading&lt;/h3>
&lt;div class="notices note" >&lt;p>&lt;p>from &lt;a href="https://en.cppreference.com/w/c/thread/thrd_create">cppreference.com&lt;/a>:&lt;/p>
&lt;p>The type &lt;code>thrd_start_t&lt;/code> is a typedef of &lt;code>int(*)(void*)&lt;/code>, which differs from the POSIX equivalent &lt;code>void*(*)(void*)&lt;/code>&lt;/p>
&lt;/p>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;threads.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">count_to_billion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1000000000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">at&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;counted to 1 billion! at=%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">at&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">n_threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">thrd_t&lt;/span> &lt;span class="kr">thread&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n_threads&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">thrd_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">count_to_billion&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n_threads&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">thrd_join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">thread&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>let&amp;rsquo;s compile our program and run it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">gcc main.c -lpthread
&lt;/code>&lt;/pre>&lt;/div>&lt;p>don&amp;rsquo;t forget to link it with thread library of your OS, in my case, it&amp;rsquo;s &lt;code>pthreads&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">~/Documents/Projects/CWS » time ./a.out
counted to 1 billion! at=1000000000
counted to 1 billion! at=1000000000
counted to 1 billion! at=1000000000
counted to 1 billion! at=1000000000
counted to 1 billion! at=1000000000
./a.out 8.92s user 0.00s system 497% cpu 1.794 total
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>as it&amp;rsquo;s quite evident from the execution time of both programs, Multi-threaded program is much faster.&lt;/p>
&lt;blockquote>
&lt;p>1.794(MT) &amp;gt; 8.686(ST)&lt;/p>
&lt;/blockquote></description></item><item><title>Function Pointers in C</title><link>https://stdin.top/posts/function-pointers-c/</link><pubDate>Fri, 24 Jul 2020 19:00:12 +0530</pubDate><guid>https://stdin.top/posts/function-pointers-c/</guid><description>&lt;h1 id="introduction">introduction&lt;/h1>
&lt;p>this is a short excerpt on function pointers in C.&lt;/p>
&lt;h2 id="what-is-a-pointer">What is a pointer?&lt;/h2>
&lt;p>a &lt;code>pointer&lt;/code> is a variable that holds a physical memory address of another variable.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1337&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//value
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//declare a pointer
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//b holds the addr to a;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;addr: %d, val: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//print addr and &amp;#34;a&amp;#34; value.
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Output&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">addr: 1293474476, val: 1337
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="what-is-a-function-pointer">What is a function pointer?&lt;/h2>
&lt;p>a &lt;code>function pointer&lt;/code> points to a function. it can be called like any other function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">funcPointerAdd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="cm">/* ↓ ↓ ↓ ↓
&lt;/span>&lt;span class="cm">(return_type) (Function Name) (arg1) (arg2) (assign to actual function addr.)
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">funcPointerAdd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="function-pointer-as-a-type">Function Pointer as a &lt;em>type&lt;/em>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">typedef&lt;/span> &lt;span class="nf">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">funcPointer_t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* ↓ ↓ ↓ ↓ ↓
&lt;/span>&lt;span class="cm">(typedef) (return_type) (type_name) (arg1) (arg2) */&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">funcPointer_t&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">51&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Writing an Algorithm for Algoticks</title><link>https://stdin.top/posts/write-algo-for-algoticks/</link><pubDate>Sat, 11 Jul 2020 01:21:15 +0530</pubDate><guid>https://stdin.top/posts/write-algo-for-algoticks/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This is a short tutorial on how to write an algorithm to use with algoticks. This article also provides a general layout of how algoticks asks and receives signals from user-written algorithms.&lt;/p>
&lt;p>an algorithm, in the context of algoticks, is simply a function. The function must return a &lt;code>signal&lt;/code>&lt;/p>
&lt;p>&lt;code>Signal&lt;/code> is defined as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">Signal&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">buy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">neutral&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sell&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="n">algoticks_signal&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>only any one of the above fields shall be set to &lt;code>true&lt;/code> and the remaining two must be set to &lt;code>false&lt;/code>. A &lt;code>signal&lt;/code> response consisting of more than 1 field set as &lt;code>true&lt;/code> will result in either an error or a guaranteed (undefined/undesired) behavior.&lt;/p>
&lt;h1 id="layout">Layout&lt;/h1>
&lt;p>Example layout of an algorithm is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;../../include/dtypes.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#ifdef _WIN32
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kr">__declspec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dllexport&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// This is required for windows compatibility.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="n">algoticks_signal&lt;/span> &lt;span class="n">analyze&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">algoticks_row&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">series&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n_candles&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="cm">/* Blah Blah Blah */&lt;/span> &lt;span class="c1">// a short desc. of algorithm
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">Signal&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm"> DO SOMETHING HERE!
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// finally return the signal.
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="whats-inside-series">what&amp;rsquo;s inside &lt;code>series&lt;/code>?&lt;/h1>
&lt;p>a series is a collection of &lt;code>n&lt;/code> rows (&lt;code>n&lt;/code> defined by user &lt;code>candles&lt;/code> in &lt;code>config.json&lt;/code>)&lt;/p>
&lt;p>a &lt;code>Row&lt;/code> struct is defined as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">Row&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="cm">/* dataformat to store CSV data */&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">date&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">open&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">high&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">low&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">close&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">volume&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">algoticks_tow_ti&lt;/span> &lt;span class="n">technical_indicators&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">curr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">n_rows&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//this is to be set in case of Row array of non-predetermined size.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="n">algoticks_row&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice &lt;code>technical_indicators&lt;/code> of type &lt;code>algoticks_tow_ti&lt;/code>&lt;/p>
&lt;p>&lt;code>algoticks_tow_ti&lt;/code> is another struct that holds user given technical indicator data.&lt;/p>
&lt;p>&lt;code>algoticks_tow_ti&lt;/code> is defined as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">row_ti&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">is_ti1_p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">ti1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">is_ti2_p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">ti2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">is_ti3_p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">float&lt;/span> &lt;span class="n">ti3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">is_ti_others_p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">ti_others&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2048&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="n">algoticks_tow_ti&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>algoticks allow up to 3 technical indicators i.e &lt;code>ti1&lt;/code> &lt;code>ti2&lt;/code> &lt;code>ti3&lt;/code> these fields need to explicitly set by the user in CSV data source to be parsed by algoticks.&lt;/p>
&lt;p>if more then 3 technical indicators are required, the user can use &lt;code>ti_others&lt;/code> and split it inside the algorithm as he needs.&lt;/p>
&lt;p>fields with &lt;code>_p&lt;/code> prefix are flags indicating the presence of corresponding values.&lt;/p>
&lt;h1 id="dissecting-a-simple-algorithm">Dissecting a simple algorithm&lt;/h1>
&lt;p>Here, we take a simple algorithm &lt;code>Greens&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://github.com/jkotra/algoticks/blob/master/src/algorithms/Greens.c">&lt;code>Greens.c&lt;/code>&lt;/a> is included with algoticks and can be found at &lt;code>algorithms/Greens.c&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">
&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;../../include/dtypes.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#ifdef _WIN32
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kr">__declspec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dllexport&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="cp">#endif
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="n">algoticks_signal&lt;/span> &lt;span class="n">analyze&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">algoticks_row&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">series&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n_candles&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="cm">/* This is a buy only algo indicator */&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">Signal&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Step 1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n_candles&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Step 2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">series&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">close&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">series&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">// Step 3
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">buy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">signal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">neutral&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">signal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sell&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">signal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">buy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">signal&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Step 4
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are only 4 simple steps in writing an algorithm.&lt;/p>
&lt;ol>
&lt;li>Declare a &lt;code>Signal&lt;/code> struct.&lt;/li>
&lt;li>Start a &lt;code>for&lt;/code> loop.&lt;/li>
&lt;li>Write the condition. If the condition fails, set &lt;code>signal.neutral&lt;/code> to &lt;code>true&lt;/code> and &lt;code>signal.buy&lt;/code> and &lt;code>signal.sell&lt;/code> to &lt;code>false&lt;/code>.&lt;/li>
&lt;li>if the condition is met, set &lt;code>signal.buy&lt;/code> to &lt;code>true&lt;/code>&lt;/li>
&lt;li>Return &lt;code>signal&lt;/code>&lt;/li>
&lt;/ol>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>The example above is a very simple algorithm. a bit complex algorithm(s) like &lt;a href="https://github.com/jkotra/algoticks/blob/master/src/algorithms/EveningStar.c">&lt;code>EveningStar&lt;/code>&lt;/a> should be reviewed for a better understanding of translating your ideas into working algorithms.&lt;/p></description></item><item><title>Getting Started With Algoticks</title><link>https://stdin.top/posts/getting-started-with-algoticks/</link><pubDate>Thu, 02 Jul 2020 03:06:47 +0000</pubDate><guid>https://stdin.top/posts/getting-started-with-algoticks/</guid><description>&lt;div class="notices note" >&lt;p>&lt;p>&lt;strong>Updated&lt;/strong>: 10-Mar-2021&lt;/p>
&lt;ul>
&lt;li>&lt;em>Updated things that are changed in algoticks v2.0&lt;/em>&lt;/li>
&lt;/ul>
&lt;/p>&lt;/div>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>This is a quick &amp;ldquo;Getting Started&amp;rdquo; Guide to algoticks trading simulator program. Algorticks is an algorithmic trading simulator written in C with Speed and modularity as design objectives. It&amp;rsquo;s easy to write your own algorithms, all you need to know is how to write a for loop in C. (&lt;a href="https://www.tutorialspoint.com/cprogramming/c_for_loop.htm">learn here&lt;/a>)&lt;/p>
&lt;p>Algoticks is built to handle many types of OHLC data, most of the data found online can be directly fed into the program without any additional filtering.&lt;/p>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>&lt;a href="https://github.com/jkotra/algoticks/releases/">Get latest algoticks release from github repository!&lt;/a>&lt;/p>
&lt;p>to build from source, please refer to &lt;a href="https://github.com/jkotra/algoticks/blob/master/README.md">README.md&lt;/a>&lt;/p>
&lt;h2 id="preprocessing">Preprocessing&lt;/h2>
&lt;p>Additional preprocessing is necessary to remove any oddities in your data like Missing data, ununiform formatting, etc.&lt;/p>
&lt;p>Algoticks accepts upto 3 technical indicator columns namely as &lt;code>ti1&lt;/code>, &lt;code>ti2&lt;/code>, &lt;code>ti3&lt;/code>. these values must be of type &lt;code>int&lt;/code> or &lt;code>float&lt;/code>. any additional technical indicators can be included using &lt;code>ti_others&lt;/code> column name. these values are exposed as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">Row&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">technical_indicators&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ti1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Row&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">technical_indicators&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ti2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Row&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">technical_indicators&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ti3&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Row&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">technical_indicators&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ti_others&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2084&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="simulation">Simulation&lt;/h2>
&lt;p>Example config file(s) can be found in the &lt;code>assets&lt;/code> folder of the project. these are copied into &lt;code>bin&lt;/code> folder on the invocation of &lt;code>make&lt;/code>&lt;/p>
&lt;p>example &lt;code>config.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;algo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;algorithms/3Reds.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;datasource&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;example.csv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;symbol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;SUNPHARMA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;candles&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interval&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;quantity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;target&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;stoploss&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;is_training_sl&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;trailing_sl_val&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;sliding&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;intraday&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;skip_header&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>algo&lt;/code> - This is the name of the algorithm.&lt;/p>
&lt;p>&lt;code>datasource&lt;/code> - This is the datasource which is expected to contain OHLC data.&lt;/p>
&lt;p>&lt;code>symbol&lt;/code> - Symbol corresponding to datasource.&lt;/p>
&lt;p>&lt;code>candles&lt;/code> - &lt;code>N&lt;/code> candles to be sent to &lt;code>algo&lt;/code>&lt;/p>
&lt;p>&lt;code>interval&lt;/code> - &lt;code>n&lt;/code> rows to skip. Assuming your data is &lt;code>1min&lt;/code> interval, skipping 5 rows effectively makes it &lt;code>5min&lt;/code> interval data.&lt;/p>
&lt;p>&lt;code>quantity&lt;/code> - Quantity&lt;/p>
&lt;p>&lt;code>target&lt;/code> - Desired target (Absolute Value)&lt;/p>
&lt;p>&lt;code>Stoploss&lt;/code> - Desired Stoploss (Absolute Value)&lt;/p>
&lt;p>&lt;code>is_training_sl&lt;/code> - Enable/Disable Trailing SL.&lt;/p>
&lt;p>&lt;code>trailing_sl_val&lt;/code> - Value to adjust on Target hit if trailing SL enabled.&lt;/p>
&lt;p>&lt;code>sliding&lt;/code> - If enabled, the data on I(Iteration)+1 will be in the form of N(Candles)+1. Otherwise only new rows are processed on every iteration.&lt;/p>
&lt;p>&lt;code>intraday&lt;/code> - Position is closed if time is over &lt;code>intraday&lt;/code>. (&lt;code>intraday_hour&lt;/code> and &lt;code>intraday_min&lt;/code> is to be set in &lt;code>settings.json&lt;/code>)&lt;/p>
&lt;p>&lt;code>skip_header&lt;/code> - Skips headers (Must be set to &lt;code>true&lt;/code> for header order detection)&lt;/p>
&lt;div class="notices note" >&lt;p>&lt;p>if &lt;code>sliding: true&lt;/code>&lt;/p>
&lt;p>$$\ [r1, r2, r3]r4,r5,r6 $$
$$\ r1, [r2, r3,r4],r5,r6 $$&lt;/p>
&lt;p>if &lt;code>sliding: false&lt;/code>&lt;/p>
&lt;p>$$\ [r1, r2, r3]r4,r5,r6 $$
$$\ r1, r2, r3,[r4,r5,r6] $$&lt;/p>
&lt;/p>&lt;/div>
&lt;hr>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>Data: &lt;a href="https://drive.google.com/file/d/19sH22KV4X_reuf7wg2AWLXqVLSfqVs0K/view?usp=sharing">NIFTY50 1min Interval OHLC&lt;/a>&lt;/p>
&lt;p>&lt;code>config.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;algo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;algorithms/3Reds.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;datasource&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;NIFTY50_1min.csv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;symbol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;NIFTY50&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;candles&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;interval&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;quantity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;target&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;stoploss&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;is_trailing_sl&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;trailing_sl_val&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;sliding&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;intraday&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;skip_header&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>run algoticks from the command line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">./algoticks
&lt;/code>&lt;/pre>&lt;/div>&lt;p>to enable debug (this shows Target Hits, SL hits, TSL Adjustments, etc..)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">./algoticks -D
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On completion of the simulation, a &lt;code>result.csv&lt;/code> is generated with results pertaining to completed simulation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">algo,pnl,datasource,symbol,candles,interval,target,stoploss,is_trailing_sl,trailing_sl_val,quantity,sliding,intraday,buy_signals,sell_signals,neutral_signals,trgt_hits,sl_hits,b_trgt_hits,s_trgt_hits,b_sl_hits,s_sl_hits,peak,bottom
algorithms/3Reds.so,-319344.750000,NIFTY50_1min.csv,NIFTY50,3,0,50.000000,75.000000,1,25.000000,100,0,0,0,380,1119,89,253,0,89,0,253,127930.085938,-346939.656250
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="benchmark">Benchmark&lt;/h2>
&lt;p>Algoticks has the ability to perform hundreds of simulation to choose the best one.&lt;/p>
&lt;p>benchmark mode can be enabled using command line arg &lt;code>-B&lt;/code>&lt;/p>
&lt;p>&lt;code>benchmark.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;algo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;algorithms/3Greens.so&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;algorithms/3Reds.so&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;datasource&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;example.csv&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;symbol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;SUNPHARMA&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;candles&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;interval&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;quantity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;target&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mf">1.5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">2.5&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;stoploss&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">2.5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">3.5&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;is_trailing_sl&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;trailing_sl_val&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;sliding&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;intraday&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;skip_header&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A &lt;code>results.csv&lt;/code> is generated with all the simulation results.&lt;/p>
&lt;h2 id="livemode">LiveMode&lt;/h2>
&lt;p>Alogticks can detect and work with live updated datasource(s).&lt;/p>
&lt;p>This gives the ability to monitor and test real-time market data.&lt;/p>
&lt;p>this feature can be enabled using &lt;code>-L&lt;/code> command line arg.&lt;/p>
&lt;p>example:&lt;/p>
&lt;p>&lt;code>./algoticks -l&lt;/code>&lt;/p>
&lt;p>What this essentially does is that, on hitting EOF, the program will repeatedly check for file modification in datasource, if it detects any modification, it reloads the file and continues execution.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>Algoticks is a result of almost a month of programming, tweaking and debugging. The idea was first implemented in python but the speed is not great, thus it will never see the light of the public. This is made with a vision to be very fast, compact, and robust compared to the initial python mock project.&lt;/p>
&lt;p>Good day. 😊&lt;/p></description></item><item><title>Reading CSV files in C</title><link>https://stdin.top/posts/csv-in-c/</link><pubDate>Sun, 14 Jun 2020 23:32:29 +0530</pubDate><guid>https://stdin.top/posts/csv-in-c/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this, I will show you how to read CSV files in C.&lt;/p>
&lt;h1 id="examplecsv">Example.csv&lt;/h1>
&lt;p>Let&amp;rsquo;s take a look at &lt;code>example.csv&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">date,open,high,low,close,volume
2020-03-11 09:15:00,26272.75,26453.65,26241.5,26443.85,0
2020-03-11 09:16:00,26447.1,26542.2,26423.6,26520.45,0
2020-03-11 09:17:00,26526.75,26543.15,26465.55,26522.15,0
2020-03-11 09:18:00,26531.3,26556,26504.55,26543.95,0
2020-03-11 09:19:00,26544.55,26633.85,26544.55,26633.85,0
2020-03-11 09:20:00,26633.9,26676.1,26619.15,26647.05,0
2020-03-11 09:21:00,26647,26654.5,26611.7,26652.6,0
2020-03-11 09:22:00,26659.05,26698.1,26646.7,26690.25,0
2020-03-11 09:23:00,26691.9,26711.9,26649.5,26659.1,0
2020-03-11 09:24:00,26659,26784.2,26659,26753.85,0
2020-03-11 09:25:00,26751.9,26767.95,26721.1,26727.3,0
2020-03-11 09:26:00,26729.95,26742.45,26684.55,26688.4,0
2020-03-11 09:27:00,26684.25,26751.25,26670.4,26728.15,0
2020-03-11 09:28:00,26727.9,26768.1,26725.8,26755.95,0
2020-03-11 09:29:00,26755.65,26779.7,26755.65,26760.65,0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is an example of OHLC data - &lt;strong>O&lt;/strong>pen &lt;strong>H&lt;/strong>igh &lt;strong>L&lt;/strong>ow &lt;strong>C&lt;/strong>lose Data. This type of data is widely used to represent movement in a financial instruments. we will use this example data to demonstrate how to read CSV files in C.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;ul>
&lt;li>gcc version 10.1.0 (GCC)&lt;/li>
&lt;/ul>
&lt;h1 id="hello-world">Hello World&lt;/h1>
&lt;p>CSV stands for &lt;strong>C&lt;/strong>omma &lt;strong>S&lt;/strong>eparated &lt;strong>V&lt;/strong>alues.
The process of reading CSV can be broken down into two steps:&lt;/p>
&lt;ul>
&lt;li>Read a line -&amp;gt; &lt;code>L&lt;/code>&lt;/li>
&lt;li>Split &lt;code>L&lt;/code> by &lt;code>,&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Now, you have the values of the row.&lt;/p>
&lt;hr>
&lt;h1 id="reading-a-line">Reading a line&lt;/h1>
&lt;p>we use &lt;code>fgets()&lt;/code> from &lt;code>string.h&lt;/code>.&lt;/p>
&lt;h3 id="lets-demonstrate-this">let&amp;rsquo;s demonstrate this.&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define MAXCHAR 1000
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXCHAR&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;example.csv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">feof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXCHAR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Row: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="output">Output&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Row: date,open,high,low,close,volume
Row: 2020-03-11 09:15:00,26272.75,26453.65,26241.5,26443.85,0
Row: 2020-03-11 09:16:00,26447.1,26542.2,26423.6,26520.45,0
Row: 2020-03-11 09:17:00,26526.75,26543.15,26465.55,26522.15,0
Row: 2020-03-11 09:18:00,26531.3,26556,26504.55,26543.95,0
Row: 2020-03-11 09:19:00,26544.55,26633.85,26544.55,26633.85,0
Row: 2020-03-11 09:20:00,26633.9,26676.1,26619.15,26647.05,0
Row: 2020-03-11 09:21:00,26647,26654.5,26611.7,26652.6,0
Row: 2020-03-11 09:22:00,26659.05,26698.1,26646.7,26690.25,0
Row: 2020-03-11 09:23:00,26691.9,26711.9,26649.5,26659.1,0
Row: 2020-03-11 09:24:00,26659,26784.2,26659,26753.85,0
Row: 2020-03-11 09:25:00,26751.9,26767.95,26721.1,26727.3,0
Row: 2020-03-11 09:26:00,26729.95,26742.45,26684.55,26688.4,0
Row: 2020-03-11 09:27:00,26684.25,26751.25,26670.4,26728.15,0
Row: 2020-03-11 09:28:00,26727.9,26768.1,26725.8,26755.95,0
Row: 2020-03-11 09:29:00,26755.65,26779.7,26755.65,26760.65,0%
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="tokenizing">Tokenizing&lt;/h1>
&lt;p>Tokenizing is the processing of splitting a string by any given character, in our case we want to split it by &lt;code>,&lt;/code>.&lt;/p>
&lt;p>we use &lt;code>strtok()&lt;/code> from &lt;code>string.h&lt;/code>&lt;/p>
&lt;h3 id="code">code&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="cp">#define MAXCHAR 1000
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">MAXCHAR&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">token&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">fp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;example.csv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">feof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">fgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXCHAR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Row: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strtok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">token&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Token: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strtok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="output-1">Output&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Row: date,open,high,low,close,volume
Token: date
Token: open
Token: high
Token: low
Token: close
Token: volume
Row: 2020-03-11 09:15:00,26272.75,26453.65,26241.5,26443.85,0
Token: 2020-03-11 09:15:00
Token: 26272.75
Token: 26453.65
Token: 26241.5
Token: 26443.85
Token: 0
Row: 2020-03-11 09:16:00,26447.1,26542.2,26423.6,26520.45,0
Token: 2020-03-11 09:16:00
Token: 26447.1
Token: 26542.2
Token: 26423.6
Token: 26520.45
Token: 0
Row: 2020-03-11 09:17:00,26526.75,26543.15,26465.55,26522.15,0
Token: 2020-03-11 09:17:00
Token: 26526.75
Token: 26543.15
Token: 26465.55
Token: 26522.15
Token: 0
Row: 2020-03-11 09:18:00,26531.3,26556,26504.55,26543.95,0
Token: 2020-03-11 09:18:00
Token: 26531.3
Token: 26556
Token: 26504.55
Token: 26543.95
Token: 0
Row: 2020-03-11 09:19:00,26544.55,26633.85,26544.55,26633.85,0
Token: 2020-03-11 09:19:00
Token: 26544.55
Token: 26633.85
Token: 26544.55
Token: 26633.85
Token: 0
....
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;div class="notices note" >&lt;p>For large CSV files, it&amp;rsquo;s advisable to read using a combination of &lt;code>fseek()&lt;/code> and &lt;code>ftell()&lt;/code>&lt;/p>&lt;/div></description></item><item><title>'Know Your IP Address' with React</title><link>https://stdin.top/posts/react-myip/</link><pubDate>Sat, 21 Mar 2020 20:13:16 +0530</pubDate><guid>https://stdin.top/posts/react-myip/</guid><description>&lt;p>&lt;a href="https://lab.stdin.top/#/myip/">Demo&lt;/a> | &lt;a href="https://gitlab.com/synk.0x1/lab.stdin.top/-/blob/master/src/components/pages/MyIp.js">Code&lt;/a>&lt;/p>
&lt;p>This is a quick primer on how to make a &amp;lsquo;Know Your IP&amp;rsquo; page with React.&lt;/p>
&lt;div class="notices info" >&lt;p>To follow through this, you will need to install &lt;code>node&lt;/code>, and create a new project using &lt;code>create-react-app&lt;/code>.This tutorial only deals with creating &lt;em>Know Your IP Address&lt;/em> Component.&lt;/p>&lt;/div>
&lt;hr>
&lt;h1 id="prerequisites">Prerequisites&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://www.npmjs.com/package/public-ip">public-ip&lt;/a> module&lt;/li>
&lt;li>Working knowledge with &lt;a href="https://reactjs.org/">React&lt;/a> and ES6 Javascript.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Start by making a default skeleton component.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">
&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">publicIp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;public-ip&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">render&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">h1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">Hello&lt;/span> &lt;span class="nx">World&lt;/span>&lt;span class="o">!&amp;lt;&lt;/span>&lt;span class="err">/h1&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">MyIp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Make sure this is working, when you visit the component, it should display &amp;ldquo;Hello World!&amp;rdquo;&lt;/p>
&lt;hr>
&lt;p>Create a &lt;code>constructor&lt;/code> for our class.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;ipv4&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;0.0.0.0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;ok&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, I initiate a React &lt;code>state&lt;/code> with 2 value pairs.&lt;/p>
&lt;ul>
&lt;li>&lt;code>'ipv4': '0.0.0.0'&lt;/code> - Placeholder that we update after retriving user&amp;rsquo;s ip.&lt;/li>
&lt;li>&lt;code>'ok': false&lt;/code> - This will be set to &lt;code>True&lt;/code> if user&amp;rsquo;s ip is sucessfully retrived.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>These are some helper functions the retrieve and update IP in the state:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">get_ip_user_ipv4&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">ip&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">publicIp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">v4&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">ip&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">async&lt;/span> &lt;span class="nx">set_ip&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">curr_ip_ipv4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">try&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">curr_ip_ipv4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get_ip_user_ipv4&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">curr_ip_ipv4&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">undefined&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">curr_ip_ipv4&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">)){&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s1">&amp;#39;ipv4&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">curr_ip_ipv4&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s1">&amp;#39;ok&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ipv4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>set_ip()&lt;/code> is the entry point. It will further call &lt;code>get_ip_user_ipv4()&lt;/code> to get IP address of the user.It will then update &lt;code>ipv4&lt;/code> state with retrieved IP and set &lt;code>ok&lt;/code> state to &lt;code>True&lt;/code>&lt;/p>
&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="nx">render&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="o">?&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span> &lt;span class="nx">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;alert alert-primary&amp;#34;&lt;/span> &lt;span class="nx">role&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;alert&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">h3&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">Your&lt;/span> &lt;span class="nx">IP&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ipv4&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/h3&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;: null}&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">button&lt;/span> &lt;span class="nx">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;btn btn-success&amp;#34;&lt;/span> &lt;span class="nx">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set_ip&lt;/span>&lt;span class="p">()}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">Get&lt;/span> &lt;span class="nx">IP&lt;/span>&lt;span class="o">!&amp;lt;&lt;/span>&lt;span class="err">/button&amp;gt;&lt;/span>
&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>first, we check whether &lt;code>state.ok&lt;/code> is set to True, This means we only want it to render if it is set to true or else return &lt;code>null&lt;/code>. I used &lt;a href="https://getbootstrap.com/docs/4.0/components/alerts/">Bootstrap alert&lt;/a> to make it look good, this is is &lt;em>optional&lt;/em>.&lt;/p>
&lt;p>in &lt;code>Button&lt;/code> we use &lt;code>onClick&lt;/code> prop to invoke our function that retrieves and displays user IP on screen.&lt;/p>
&lt;div class="notices tip" >&lt;p>&lt;a href="https://gitlab.com/synk.0x1/lab.stdin.top/-/blob/master/src/components/pages/MyIp.js">Full code - MyIp.js&lt;/a>&lt;/p>&lt;/div></description></item><item><title>Overview of WPC: Writing a wallpaper changer in Rust</title><link>https://stdin.top/posts/wpc-overview/</link><pubDate>Fri, 13 Mar 2020 10:30:06 +0530</pubDate><guid>https://stdin.top/posts/wpc-overview/</guid><description>&lt;p>&lt;a href="https://travis-ci.org/jkotra/wpc">
&lt;img src="https://travis-ci.org/jkotra/wpc.svg?branch=master" alt="Build Status">
&lt;/a>
&lt;img src="https://img.shields.io/github/languages/code-size/jkotra/wpc" alt="">
&lt;/p>
&lt;p>WPC stands for &lt;strong>W&lt;/strong>all &lt;strong>P&lt;/strong>aper &lt;strong>C&lt;/strong>hanger&lt;/p>
&lt;p>&lt;a href="https://github.com/jkotra/wpc">Github&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="changelog">Changelog&lt;/h2>
&lt;h3 id="09-07-2020">(09-07-2020)&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jkotra/wpc/releases/tag/0.5">WPC v0.5&lt;/a> is a major release. &lt;code>main.rs&lt;/code> is mostly rewritten.&lt;/li>
&lt;/ul>
&lt;h3 id="14-01-2021">(14-01-2021)&lt;/h3>
&lt;div class="notices warning" >&lt;p>&lt;p>&lt;code>WPC&lt;/code> gained partial &lt;code>async&lt;/code> support from &lt;code>0.7&lt;/code> and almost full &lt;code>async&lt;/code> (except for &lt;code>wallhaven_api&lt;/code>) from &lt;code>1.0&lt;/code> on wards. &lt;strong>some parts of this article may not be relevant anymore&lt;/strong>, but may still be useful. I&amp;rsquo;ve written a short &lt;a href="https://stdin.top/posts/what-changed-in-wpc-1.0-a-lot/">&amp;ldquo;What changed in 1.0? a lot!&amp;quot;&lt;/a> to provide a general change log and overview of the project.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jkotra/wpc/tree/0.1.4">this tag&lt;/a> might be the last tree where this article is 100% relevant.&lt;/li>
&lt;/ul>
&lt;/p>&lt;/div>
&lt;hr>
&lt;h3 id="why">Why?&lt;/h3>
&lt;p>I have a dual boot setup (Arch Linux/Windows 10) and I use Gnome DE in my arch Linux which lacks automatic wallpaper changing functionality.&lt;/p>
&lt;p>Even in the case of windows 10, While there is a &lt;em>Slideshow&lt;/em> of wallpapers, it does not have an option like interval or web source.&lt;/p>
&lt;p>both of these reasons led me to develop my own application. I want it to be simple, fast and reliable so I chose Rust.&lt;/p>
&lt;h3 id="how">How?&lt;/h3>
&lt;p>WPC is written in rust with a modular design in mind.&lt;/p>
&lt;p>APIs are divided into modules and used in main.rs as required based on the platform.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">.
├── Cargo.lock
├── Cargo.toml
├── LICENSE.md
├── README.md
└── src
├── changer
│   ├── linux
│   │   └── DE
│   │   ├── gnome.rs
│   │   └── startup.rs
│   └── windows
│   └── windows.rs
├── cli.yml
├── main.rs
├── misc.rs
└── web
├── bing_wpod.rs
└── wallheaven_api.rs
6 directories, 12 files
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="dependencies">Dependencies&lt;/h3>
&lt;p>&lt;code>config.toml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">package&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;wpc&amp;#34;&lt;/span>
&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.1.1&amp;#34;&lt;/span>
&lt;span class="nx">authors&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;Jagadeesh Kotra &amp;lt;jagadeesh@stdin.top&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">edition&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;2018&amp;#34;&lt;/span>
&lt;span class="c"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">serde&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;1.0.104&amp;#34;&lt;/span>
&lt;span class="nx">serde_json&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;1.0.48&amp;#34;&lt;/span>
&lt;span class="nx">reqwest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.10&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">features&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;blocking&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;json&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="nx">clap&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;2.33&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">features&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;yaml&amp;#34;&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;span class="nx">rand&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.7&amp;#34;&lt;/span>
&lt;span class="nx">chrono&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.4.10&amp;#34;&lt;/span>
&lt;span class="nx">enquote&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;1.0.3&amp;#34;&lt;/span>
&lt;span class="nx">dirs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;2.0.2&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="s1">&amp;#39;cfg(windows)&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">winapi&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">features&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;winuser&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some notes,&lt;/p>
&lt;p>&lt;code>serde&lt;/code> and &lt;code>serde_json&lt;/code> is used to deal with JSON data.&lt;/p>
&lt;p>&lt;code>reqwest&lt;/code> is the used to parse information from web sources.&lt;/p>
&lt;p>&lt;code>winapi&lt;/code> provides access to Windows API&lt;/p>
&lt;hr>
&lt;h3 id="wallheaven-api">Wallheaven API&lt;/h3>
&lt;p>One of the main features of WPC is its ability to parse wallpapers from the web. Namely, &lt;a href="https://wallhaven.cc/">Wallheaven&lt;/a> and Bing WPOD are implemented.&lt;/p>
&lt;p>&lt;a href="https://wallhaven.cc/help/api">wallheaven API&lt;/a> is implemented in Rust
It uses &lt;code>reqwest::blocking&lt;/code> to make GET requests and convert them to JSON.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">wallheaven_wallpaperinfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">apikey&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">serde_json&lt;/span>::&lt;span class="n">value&lt;/span>::&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">error&lt;/span>::&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">wallheaven_search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">apikey&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">query&lt;/span>: &lt;span class="nc">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">error&lt;/span>::&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">wallheaven_taginfo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">error&lt;/span>::&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">wallheaven_usersettings&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">apikey&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">error&lt;/span>::&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">wallheaven_getid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">apikey&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">serde_json&lt;/span>::&lt;span class="n">value&lt;/span>::&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">error&lt;/span>::&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">wallheaven_getcoll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">collid&lt;/span>: &lt;span class="kt">i64&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">serde_json&lt;/span>::&lt;span class="n">value&lt;/span>::&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">error&lt;/span>::&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/jkotra/wpc/blob/master/src/web/wallheaven_api.rs">wallhaven.rs&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="bing-api">Bing API&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_wallpaper_of_the_day&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">serde_json&lt;/span>::&lt;span class="n">value&lt;/span>::&lt;span class="n">Value&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">error&lt;/span>::&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">reqwest&lt;/span>::&lt;span class="n">blocking&lt;/span>::&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://www.bing.com/HPImageArchive.aspx?format=js&amp;amp;idx=0&amp;amp;n=1&amp;amp;mkt=en-US&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Unable to make GET request!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v&lt;/span>: &lt;span class="nc">Value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serde_json&lt;/span>::&lt;span class="n">from_str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">resp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Cannot Decode JSON Data!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output: &lt;code>JSON&lt;/code>&lt;/p>
&lt;hr>
&lt;h3 id="tests">Tests&lt;/h3>
&lt;div class="notices warning" >&lt;p>Network Connectivity is required for the following tests:
&lt;br>
&lt;code>fn bing_test_is_jpg()&lt;/code>
&lt;br>
&lt;code>fn bing_test_is_downloadable()&lt;/code>
&lt;br>
&lt;code>fn wallheaven_get_wallpapers()&lt;/code>
&lt;br>&lt;/p>&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">it_works&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">assert_eq!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">bing_test_is_jpg&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">bing_test_is_downloadable&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">wallheaven_get_wallpapers&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Creating this application has been a great journey. PR/Issues are welcome.&lt;/p>
&lt;p>&lt;a href="https://github.com/jkotra/wpc">Github&lt;/a>&lt;/p></description></item><item><title>Vapoursynth - Merge clips using MaskedMerge</title><link>https://stdin.top/posts/vapoursynth-maskedmerge/</link><pubDate>Tue, 03 Mar 2020 22:03:21 +0530</pubDate><guid>https://stdin.top/posts/vapoursynth-maskedmerge/</guid><description>&lt;div class="notices note" >&lt;p>&lt;p>&lt;code>std.MaskedMerge(clip clipa, clip clipb, clip mask[, int[] planes, bint first_plane=0, bint premultiplied=0]) &lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.vapoursynth.com/doc/functions/maskedmerge.html#std.MaskedMerge">&lt;strong>MaskedMerge&lt;/strong>&lt;/a> merges &lt;em>clipa&lt;/em> with &lt;em>clipb&lt;/em> using the per pixel weights in the mask, where 0 means that clipa is returned unchanged. If mask is a grayscale clip or if first_plane is true, the mask’s first plane will be used as the mask for merging all planes. The mask will be bilinearly resized if necessary.&lt;/p>
&lt;/p>&lt;/div>
&lt;hr>
&lt;h1 id="objective">Objective&lt;/h1>
&lt;p>To demonstrate the use of &lt;code>std.MaskedMerge&lt;/code> function. I will show how you can merge two clips using a mask.&lt;/p>
&lt;p>Two small clips (&lt;em>00:01:00&lt;/em> each) are extracted from &lt;a href="https://en.wikipedia.org/wiki/Gemini_Man_(film)">Gemini Man (film)&lt;/a> for example usage. No copyright infringement intended.&lt;/p>
&lt;div class="notices tip" >&lt;p>The code and resources used in this article are availabe in &lt;a href="https://github.com/jkotra/maskedmerge_vs">Github repo&lt;/a>.
&lt;br>
Video Files:
&lt;br>
&lt;a href="https://drive.google.com/open?id=1O5my4F0cX4vrT-1NWfSdV9WCrlSMYf-A">GM_clip_1.mkv&lt;/a>
&lt;br>
&lt;a href="https://drive.google.com/open?id=1wcBgSDxO5B_GsfUUqmMGLMOujJdXe_yi">GM_clip_2.mkv&lt;/a>&lt;/p>&lt;/div>
&lt;hr>
&lt;p>Requirements:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.vapoursynth.com/">Vapoursynth&lt;/a> - Obviously!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/VFR-maniac/L-SMASH-Works">lsmas&lt;/a>- to load clip and extract a frame. (Optional)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.photoshop.com/">Photoshop&lt;/a> &lt;em>or&lt;/em> &lt;a href="https://www.gimp.org/">Gimp&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ol>
&lt;li>We use &lt;code>lsmas.LWLibavSource&lt;/code> to load the clip and save a frame as &lt;code>.png&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">clip_a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">core&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lsmas&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">LWLibavSource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">script_path&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/GM_clip_1.mkv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">threads&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="notices info" >&lt;p>you can use any other application/video player such as &lt;a href="https://www.videolan.org/vlc/index.html">VLC player&lt;/a> to save a screenshot.&lt;/p>&lt;/div>
&lt;p>
&lt;img src="https://raw.githubusercontent.com/jkotra/maskedmerge_vs/master/frame214.png" alt="Frame 214 from GM_clip_1.mkv">
&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>Open the &lt;code>png&lt;/code> in &lt;em>photoshop&lt;/em> and select the area you want to mask. Right-click on the selected area and choose &lt;strong>Layer via cut&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After removing the original layer, we are left with our required mask.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;img src="https://raw.githubusercontent.com/jkotra/maskedmerge_vs/master/1.PNG" alt="Frame 214 Mask in Photoshop">
&lt;/p>
&lt;ol start="4">
&lt;li>You can view the mask in &lt;a href="https://bitbucket.org/mystery_keeper/vapoursynth-editor/src/master/">vapoursynth editor&lt;/a> by using the snippet below.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">mask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">core&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imwri&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">script_path&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/mask.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">alpha&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">mask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_output&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;img src="https://raw.githubusercontent.com/jkotra/maskedmerge_vs/master/2.png" alt="">
&lt;/p>
&lt;div class="notices tip" >&lt;p>while using &lt;code>alpha=True&lt;/code> with &lt;code>core.imwri.Read&lt;/code> returns list with 2 clips, a normal RGB clip and Gray8 clip.the alpha clip is of index &lt;code>1&lt;/code> (or &lt;code>-1&lt;/code>).&lt;/p>&lt;/div>
&lt;ol start="5">
&lt;li>Putting it all together..&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">vapoursynth&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">vs&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;span class="n">script_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dirname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">abspath&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">core&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_core&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">clip_a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">core&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lsmas&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">LWLibavSource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">script_path&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/GM_clip_1.mkv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">threads&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">clip_b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">core&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lsmas&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">LWLibavSource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">script_path&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/GM_clip_2.mkv&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">threads&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">mask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">core&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imwri&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">script_path&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;/mask.png&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">alpha&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">merged_clip&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">core&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">MaskedMerge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">clip_a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">clip_b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">mask&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">merged_clip&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_output&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;img src="https://raw.githubusercontent.com/jkotra/maskedmerge_vs/master/merged.png" alt="Merged">
&lt;/p></description></item><item><title>Pollution forecasting using Time series and LSTM with MXnet</title><link>https://stdin.top/posts/lstm-mxnet/</link><pubDate>Mon, 21 Oct 2019 23:41:53 +0530</pubDate><guid>https://stdin.top/posts/lstm-mxnet/</guid><description>&lt;p>
&lt;img src="https://stdin.top/images/RFE2udJ.jpg" alt="Photo by &amp;lt;a href=&amp;#34;https://unsplash.com/@jakehills?utm_source=medium&amp;amp;amp;utm_medium=referral&amp;#34;&amp;gt;Jake Hills&amp;lt;/a&amp;gt; on &amp;lt;a href=&amp;#34;https://unsplash.com?utm_source=medium&amp;amp;amp;utm_medium=referral&amp;#34;&amp;gt;Unsplash&amp;lt;/a&amp;gt;">
&lt;/p>
&lt;h2 id="time-series">Time series&lt;/h2>
&lt;p>Time series analysis is a statistical technique that deals with time series data, or trend analysis. Time series data means that data is in a series of particular time periods or intervals.&lt;/p>
&lt;p>TSA(Time series analysis) applications:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Pattern recognition&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Earthquake prediction&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Weather forecast&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Financial statistics&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>and many more…&lt;/p>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>
&lt;img src="https://stdin.top/images/Hg1tYSG.jpg" alt="">
&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>with a newly-minted elite and an economic growth rate of over 10 percent, the environment has taken a backseat in China, the world’s most populous country. Growing pollution has led to unusable waterways, increased incidence of birth defects, and some of the dirtiest air on earth. It’s so nasty that there’s now a word for it: “smogpocalypse”.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://allthatsinteresting.com/pollution-in-china-photographs">Source&lt;/a>&lt;/p>
&lt;hr>
&lt;p>Read the Article @ &lt;a href="https://towardsdatascience.com/pollution-forecasting-using-time-series-and-lstm-with-mxnet-16fe9180ee1">Towards DS/Medium&lt;/a>&lt;/p>
&lt;hr>
&lt;p>Hope this article helped in your quest.&lt;/p>
&lt;div class="notices tip" >&lt;p>&lt;a href="https://colab.research.google.com/drive/1ktpx04H1uZtezRd934De3-IIqD43mhn2">Run this Notebook in Google Colab&lt;/a>&lt;/p>&lt;/div></description></item></channel></rss>